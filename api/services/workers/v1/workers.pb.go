// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: git.underland.io/ehazlett/fynca/api/services/workers/v1/workers.proto

package workers

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ListWorkersRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListWorkersRequest) Reset()         { *m = ListWorkersRequest{} }
func (m *ListWorkersRequest) String() string { return proto.CompactTextString(m) }
func (*ListWorkersRequest) ProtoMessage()    {}
func (*ListWorkersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_948b63adbbc36cca, []int{0}
}
func (m *ListWorkersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWorkersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWorkersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWorkersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWorkersRequest.Merge(m, src)
}
func (m *ListWorkersRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWorkersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWorkersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWorkersRequest proto.InternalMessageInfo

type ListWorkersResponse struct {
	Workers              []*Worker `protobuf:"bytes,1,rep,name=workers,proto3" json:"workers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListWorkersResponse) Reset()         { *m = ListWorkersResponse{} }
func (m *ListWorkersResponse) String() string { return proto.CompactTextString(m) }
func (*ListWorkersResponse) ProtoMessage()    {}
func (*ListWorkersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_948b63adbbc36cca, []int{1}
}
func (m *ListWorkersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWorkersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWorkersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWorkersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWorkersResponse.Merge(m, src)
}
func (m *ListWorkersResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWorkersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWorkersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWorkersResponse proto.InternalMessageInfo

func (m *ListWorkersResponse) GetWorkers() []*Worker {
	if m != nil {
		return m.Workers
	}
	return nil
}

type ControlWorkerRequest struct {
	WorkerID string `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*ControlWorkerRequest_Stop
	Message              isControlWorkerRequest_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ControlWorkerRequest) Reset()         { *m = ControlWorkerRequest{} }
func (m *ControlWorkerRequest) String() string { return proto.CompactTextString(m) }
func (*ControlWorkerRequest) ProtoMessage()    {}
func (*ControlWorkerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_948b63adbbc36cca, []int{2}
}
func (m *ControlWorkerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControlWorkerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControlWorkerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ControlWorkerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlWorkerRequest.Merge(m, src)
}
func (m *ControlWorkerRequest) XXX_Size() int {
	return m.Size()
}
func (m *ControlWorkerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlWorkerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ControlWorkerRequest proto.InternalMessageInfo

type isControlWorkerRequest_Message interface {
	isControlWorkerRequest_Message()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ControlWorkerRequest_Stop struct {
	Stop *WorkerStop `protobuf:"bytes,2,opt,name=stop,proto3,oneof" json:"stop,omitempty"`
}

func (*ControlWorkerRequest_Stop) isControlWorkerRequest_Message() {}

func (m *ControlWorkerRequest) GetMessage() isControlWorkerRequest_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ControlWorkerRequest) GetWorkerID() string {
	if m != nil {
		return m.WorkerID
	}
	return ""
}

func (m *ControlWorkerRequest) GetStop() *WorkerStop {
	if x, ok := m.GetMessage().(*ControlWorkerRequest_Stop); ok {
		return x.Stop
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ControlWorkerRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ControlWorkerRequest_Stop)(nil),
	}
}

type WorkerStop struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkerStop) Reset()         { *m = WorkerStop{} }
func (m *WorkerStop) String() string { return proto.CompactTextString(m) }
func (*WorkerStop) ProtoMessage()    {}
func (*WorkerStop) Descriptor() ([]byte, []int) {
	return fileDescriptor_948b63adbbc36cca, []int{3}
}
func (m *WorkerStop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerStop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerStop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerStop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerStop.Merge(m, src)
}
func (m *WorkerStop) XXX_Size() int {
	return m.Size()
}
func (m *WorkerStop) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerStop.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerStop proto.InternalMessageInfo

type ControlWorkerResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlWorkerResponse) Reset()         { *m = ControlWorkerResponse{} }
func (m *ControlWorkerResponse) String() string { return proto.CompactTextString(m) }
func (*ControlWorkerResponse) ProtoMessage()    {}
func (*ControlWorkerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_948b63adbbc36cca, []int{4}
}
func (m *ControlWorkerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControlWorkerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControlWorkerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ControlWorkerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlWorkerResponse.Merge(m, src)
}
func (m *ControlWorkerResponse) XXX_Size() int {
	return m.Size()
}
func (m *ControlWorkerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlWorkerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ControlWorkerResponse proto.InternalMessageInfo

type Worker struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	CPUs                 uint32   `protobuf:"varint,3,opt,name=cpus,proto3" json:"cpus,omitempty"`
	MemoryTotal          int64    `protobuf:"varint,4,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
	MemoryAvailable      int64    `protobuf:"varint,5,opt,name=memory_available,json=memoryAvailable,proto3" json:"memory_available,omitempty"`
	GPUs                 []string `protobuf:"bytes,6,rep,name=gpus,proto3" json:"gpus,omitempty"`
	Load1                float64  `protobuf:"fixed64,7,opt,name=load1,proto3" json:"load1,omitempty"`
	Load5                float64  `protobuf:"fixed64,8,opt,name=load5,proto3" json:"load5,omitempty"`
	Load15               float64  `protobuf:"fixed64,9,opt,name=load15,proto3" json:"load15,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Worker) Reset()         { *m = Worker{} }
func (m *Worker) String() string { return proto.CompactTextString(m) }
func (*Worker) ProtoMessage()    {}
func (*Worker) Descriptor() ([]byte, []int) {
	return fileDescriptor_948b63adbbc36cca, []int{5}
}
func (m *Worker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Worker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Worker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Worker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Worker.Merge(m, src)
}
func (m *Worker) XXX_Size() int {
	return m.Size()
}
func (m *Worker) XXX_DiscardUnknown() {
	xxx_messageInfo_Worker.DiscardUnknown(m)
}

var xxx_messageInfo_Worker proto.InternalMessageInfo

func (m *Worker) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Worker) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Worker) GetCPUs() uint32 {
	if m != nil {
		return m.CPUs
	}
	return 0
}

func (m *Worker) GetMemoryTotal() int64 {
	if m != nil {
		return m.MemoryTotal
	}
	return 0
}

func (m *Worker) GetMemoryAvailable() int64 {
	if m != nil {
		return m.MemoryAvailable
	}
	return 0
}

func (m *Worker) GetGPUs() []string {
	if m != nil {
		return m.GPUs
	}
	return nil
}

func (m *Worker) GetLoad1() float64 {
	if m != nil {
		return m.Load1
	}
	return 0
}

func (m *Worker) GetLoad5() float64 {
	if m != nil {
		return m.Load5
	}
	return 0
}

func (m *Worker) GetLoad15() float64 {
	if m != nil {
		return m.Load15
	}
	return 0
}

func init() {
	proto.RegisterType((*ListWorkersRequest)(nil), "fynca.services.workers.v1.ListWorkersRequest")
	proto.RegisterType((*ListWorkersResponse)(nil), "fynca.services.workers.v1.ListWorkersResponse")
	proto.RegisterType((*ControlWorkerRequest)(nil), "fynca.services.workers.v1.ControlWorkerRequest")
	proto.RegisterType((*WorkerStop)(nil), "fynca.services.workers.v1.WorkerStop")
	proto.RegisterType((*ControlWorkerResponse)(nil), "fynca.services.workers.v1.ControlWorkerResponse")
	proto.RegisterType((*Worker)(nil), "fynca.services.workers.v1.Worker")
}

func init() {
	proto.RegisterFile("git.underland.io/ehazlett/fynca/api/services/workers/v1/workers.proto", fileDescriptor_948b63adbbc36cca)
}

var fileDescriptor_948b63adbbc36cca = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0x6b, 0xd7, 0x36, 0xaf, 0x9d, 0x40, 0xa6, 0x40, 0x28, 0xa8, 0xcd, 0x22, 0x21, 0x65,
	0x07, 0x12, 0x5a, 0xd4, 0x53, 0x0f, 0x88, 0x0e, 0x04, 0x93, 0x40, 0x42, 0x01, 0x04, 0xe2, 0x32,
	0xb9, 0x8d, 0x17, 0x2c, 0x92, 0x38, 0xd8, 0x6e, 0x51, 0x39, 0x73, 0xe1, 0x9f, 0x71, 0xe4, 0x17,
	0x4c, 0xa8, 0x57, 0xfe, 0x04, 0x8a, 0x9d, 0x68, 0xac, 0xc0, 0x98, 0x76, 0x7b, 0xef, 0xfb, 0xbe,
	0xe7, 0xef, 0x59, 0xfe, 0x0c, 0x8f, 0x63, 0xa6, 0xfc, 0x45, 0x16, 0x51, 0x91, 0x90, 0x2c, 0xf2,
	0x19, 0x0f, 0xe8, 0x7b, 0xf2, 0x39, 0xa1, 0x4a, 0x05, 0x47, 0xab, 0x6c, 0x4e, 0x02, 0x92, 0xb3,
	0x40, 0x52, 0xb1, 0x64, 0x73, 0x2a, 0x83, 0x4f, 0x5c, 0x7c, 0xa0, 0x42, 0x06, 0xcb, 0x61, 0x55,
	0xfa, 0xb9, 0xe0, 0x8a, 0xe3, 0x9b, 0x5a, 0xec, 0x57, 0x42, 0xbf, 0x62, 0x97, 0xc3, 0x5e, 0x37,
	0xe6, 0x31, 0xd7, 0xaa, 0xa0, 0xa8, 0xcc, 0x40, 0xaf, 0x1f, 0x73, 0x1e, 0x27, 0x34, 0xd0, 0xdd,
	0x6c, 0x71, 0x14, 0x44, 0x0b, 0x41, 0x14, 0xe3, 0x59, 0xc9, 0x0f, 0x36, 0x79, 0xc5, 0x52, 0x2a,
	0x15, 0x49, 0xf3, 0x52, 0x70, 0x6b, 0x53, 0x40, 0xd3, 0x5c, 0xad, 0x0c, 0xe9, 0x76, 0x01, 0x3f,
	0x63, 0x52, 0xbd, 0x31, 0x5b, 0x84, 0xf4, 0xe3, 0x82, 0x4a, 0xe5, 0x86, 0x70, 0xf5, 0x14, 0x2a,
	0x73, 0x9e, 0x49, 0x8a, 0x27, 0xd0, 0x2c, 0xd7, 0xb5, 0x91, 0x53, 0xf3, 0xda, 0xa3, 0x5d, 0xff,
	0x9f, 0xb7, 0xf1, 0xcd, 0x70, 0x58, 0x4d, 0xb8, 0x5f, 0x11, 0x74, 0xf7, 0x79, 0xa6, 0x04, 0x4f,
	0x4a, 0xca, 0x98, 0xe1, 0x3d, 0xb0, 0x8c, 0xe6, 0x90, 0x45, 0x36, 0x72, 0x90, 0x67, 0x4d, 0x3b,
	0xeb, 0xe3, 0x41, 0xcb, 0xa8, 0x0e, 0x1e, 0x85, 0x2d, 0x43, 0x1f, 0x44, 0x78, 0x02, 0x75, 0xa9,
	0x78, 0x6e, 0x6f, 0x39, 0xc8, 0x6b, 0x8f, 0xee, 0xfc, 0xd7, 0xfd, 0xa5, 0xe2, 0xf9, 0xd3, 0x4b,
	0xa1, 0x1e, 0x9a, 0x5a, 0xd0, 0x4c, 0xa9, 0x94, 0x24, 0xa6, 0x6e, 0x07, 0xe0, 0x44, 0xe0, 0xde,
	0x80, 0x6b, 0x1b, 0x8b, 0x99, 0xfb, 0xba, 0x5f, 0xb6, 0xa0, 0x61, 0x20, 0x8c, 0xa1, 0x9e, 0x91,
	0x94, 0x9a, 0xfd, 0x42, 0x5d, 0x63, 0x1b, 0x9a, 0x4b, 0x2a, 0x24, 0xe3, 0x99, 0x5e, 0xc8, 0x0a,
	0xab, 0x16, 0xdf, 0x86, 0xfa, 0x3c, 0x5f, 0x48, 0xbb, 0xe6, 0x20, 0x6f, 0x67, 0xda, 0x5a, 0x1f,
	0x0f, 0xea, 0xfb, 0x2f, 0x5e, 0xcb, 0x50, 0xa3, 0x78, 0x17, 0x3a, 0x29, 0x4d, 0xb9, 0x58, 0x1d,
	0x2a, 0xae, 0x48, 0x62, 0xd7, 0x1d, 0xe4, 0xd5, 0xc2, 0xb6, 0xc1, 0x5e, 0x15, 0x10, 0xde, 0x83,
	0x2b, 0xa5, 0x84, 0x2c, 0x09, 0x4b, 0xc8, 0x2c, 0xa1, 0xf6, 0xb6, 0x96, 0x5d, 0x36, 0xf8, 0xc3,
	0x0a, 0x2e, 0xbc, 0xe2, 0xc2, 0xab, 0xe1, 0xd4, 0x3c, 0xcb, 0x78, 0x3d, 0xd1, 0x5e, 0x05, 0x8a,
	0xbb, 0xb0, 0x9d, 0x70, 0x12, 0x0d, 0xed, 0xa6, 0x83, 0x3c, 0x14, 0x9a, 0xa6, 0x42, 0xc7, 0x76,
	0xeb, 0x04, 0x1d, 0xe3, 0xeb, 0xd0, 0xd0, 0xf4, 0xd8, 0xb6, 0x34, 0x5c, 0x76, 0xa3, 0x9f, 0x08,
	0x9a, 0x65, 0x14, 0x70, 0x02, 0xed, 0xdf, 0x92, 0x81, 0xef, 0x9e, 0xf1, 0x04, 0x7f, 0xe6, 0xaa,
	0xe7, 0x9f, 0x57, 0x5e, 0x06, 0x4e, 0xc0, 0xce, 0xa9, 0x97, 0xc1, 0xc1, 0x19, 0x07, 0xfc, 0x2d,
	0x5c, 0xbd, 0x7b, 0xe7, 0x1f, 0x30, 0x9e, 0xd3, 0xe7, 0xdf, 0xd6, 0x7d, 0xf4, 0x7d, 0xdd, 0x47,
	0x3f, 0xd6, 0x7d, 0xf4, 0xee, 0xc1, 0x05, 0x7f, 0xfd, 0xa4, 0x2c, 0xdf, 0xd6, 0x66, 0x0d, 0xfd,
	0xd3, 0xee, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x15, 0x8b, 0x78, 0x41, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkersClient is the client API for Workers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkersClient interface {
	ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*ListWorkersResponse, error)
	ControlWorker(ctx context.Context, in *ControlWorkerRequest, opts ...grpc.CallOption) (*ControlWorkerResponse, error)
}

type workersClient struct {
	cc *grpc.ClientConn
}

func NewWorkersClient(cc *grpc.ClientConn) WorkersClient {
	return &workersClient{cc}
}

func (c *workersClient) ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*ListWorkersResponse, error) {
	out := new(ListWorkersResponse)
	err := c.cc.Invoke(ctx, "/fynca.services.workers.v1.Workers/ListWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workersClient) ControlWorker(ctx context.Context, in *ControlWorkerRequest, opts ...grpc.CallOption) (*ControlWorkerResponse, error) {
	out := new(ControlWorkerResponse)
	err := c.cc.Invoke(ctx, "/fynca.services.workers.v1.Workers/ControlWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkersServer is the server API for Workers service.
type WorkersServer interface {
	ListWorkers(context.Context, *ListWorkersRequest) (*ListWorkersResponse, error)
	ControlWorker(context.Context, *ControlWorkerRequest) (*ControlWorkerResponse, error)
}

// UnimplementedWorkersServer can be embedded to have forward compatible implementations.
type UnimplementedWorkersServer struct {
}

func (*UnimplementedWorkersServer) ListWorkers(ctx context.Context, req *ListWorkersRequest) (*ListWorkersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkers not implemented")
}
func (*UnimplementedWorkersServer) ControlWorker(ctx context.Context, req *ControlWorkerRequest) (*ControlWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlWorker not implemented")
}

func RegisterWorkersServer(s *grpc.Server, srv WorkersServer) {
	s.RegisterService(&_Workers_serviceDesc, srv)
}

func _Workers_ListWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkersServer).ListWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fynca.services.workers.v1.Workers/ListWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkersServer).ListWorkers(ctx, req.(*ListWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workers_ControlWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkersServer).ControlWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fynca.services.workers.v1.Workers/ControlWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkersServer).ControlWorker(ctx, req.(*ControlWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Workers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fynca.services.workers.v1.Workers",
	HandlerType: (*WorkersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWorkers",
			Handler:    _Workers_ListWorkers_Handler,
		},
		{
			MethodName: "ControlWorker",
			Handler:    _Workers_ControlWorker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "git.underland.io/ehazlett/fynca/api/services/workers/v1/workers.proto",
}

func (m *ListWorkersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWorkersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWorkersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ListWorkersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWorkersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWorkersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Workers) > 0 {
		for iNdEx := len(m.Workers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Workers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ControlWorkerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlWorkerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControlWorkerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.WorkerID) > 0 {
		i -= len(m.WorkerID)
		copy(dAtA[i:], m.WorkerID)
		i = encodeVarintWorkers(dAtA, i, uint64(len(m.WorkerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ControlWorkerRequest_Stop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControlWorkerRequest_Stop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Stop != nil {
		{
			size, err := m.Stop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WorkerStop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerStop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerStop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ControlWorkerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlWorkerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControlWorkerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Worker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Worker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Worker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Load15 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Load15))))
		i--
		dAtA[i] = 0x49
	}
	if m.Load5 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Load5))))
		i--
		dAtA[i] = 0x41
	}
	if m.Load1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Load1))))
		i--
		dAtA[i] = 0x39
	}
	if len(m.GPUs) > 0 {
		for iNdEx := len(m.GPUs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GPUs[iNdEx])
			copy(dAtA[i:], m.GPUs[iNdEx])
			i = encodeVarintWorkers(dAtA, i, uint64(len(m.GPUs[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.MemoryAvailable != 0 {
		i = encodeVarintWorkers(dAtA, i, uint64(m.MemoryAvailable))
		i--
		dAtA[i] = 0x28
	}
	if m.MemoryTotal != 0 {
		i = encodeVarintWorkers(dAtA, i, uint64(m.MemoryTotal))
		i--
		dAtA[i] = 0x20
	}
	if m.CPUs != 0 {
		i = encodeVarintWorkers(dAtA, i, uint64(m.CPUs))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintWorkers(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWorkers(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWorkers(dAtA []byte, offset int, v uint64) int {
	offset -= sovWorkers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListWorkersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListWorkersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Workers) > 0 {
		for _, e := range m.Workers {
			l = e.Size()
			n += 1 + l + sovWorkers(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ControlWorkerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkerID)
	if l > 0 {
		n += 1 + l + sovWorkers(uint64(l))
	}
	if m.Message != nil {
		n += m.Message.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ControlWorkerRequest_Stop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stop != nil {
		l = m.Stop.Size()
		n += 1 + l + sovWorkers(uint64(l))
	}
	return n
}
func (m *WorkerStop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ControlWorkerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Worker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWorkers(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovWorkers(uint64(l))
	}
	if m.CPUs != 0 {
		n += 1 + sovWorkers(uint64(m.CPUs))
	}
	if m.MemoryTotal != 0 {
		n += 1 + sovWorkers(uint64(m.MemoryTotal))
	}
	if m.MemoryAvailable != 0 {
		n += 1 + sovWorkers(uint64(m.MemoryAvailable))
	}
	if len(m.GPUs) > 0 {
		for _, s := range m.GPUs {
			l = len(s)
			n += 1 + l + sovWorkers(uint64(l))
		}
	}
	if m.Load1 != 0 {
		n += 9
	}
	if m.Load5 != 0 {
		n += 9
	}
	if m.Load15 != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWorkers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWorkers(x uint64) (n int) {
	return sovWorkers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListWorkersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWorkersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWorkersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWorkersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWorkersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWorkersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workers = append(m.Workers, &Worker{})
			if err := m.Workers[len(m.Workers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlWorkerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlWorkerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlWorkerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkerStop{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ControlWorkerRequest_Stop{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerStop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerStop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerStop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlWorkerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlWorkerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlWorkerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Worker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Worker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Worker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPUs", wireType)
			}
			m.CPUs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CPUs |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryTotal", wireType)
			}
			m.MemoryTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryTotal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryAvailable", wireType)
			}
			m.MemoryAvailable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryAvailable |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GPUs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GPUs = append(m.GPUs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Load1 = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load5", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Load5 = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load15", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Load15 = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipWorkers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWorkers
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWorkers
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWorkers
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWorkers        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkers          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWorkers = fmt.Errorf("proto: unexpected end of group")
)
