// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: git.underland.io/ehazlett/fynca/api/services/render/v1/render.proto

package render

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type JobStatus int32

const (
	JobStatus_QUEUED    JobStatus = 0
	JobStatus_RENDERING JobStatus = 1
	JobStatus_ERROR     JobStatus = 2
	JobStatus_FINISHED  JobStatus = 3
)

var JobStatus_name = map[int32]string{
	0: "QUEUED",
	1: "RENDERING",
	2: "ERROR",
	3: "FINISHED",
}

var JobStatus_value = map[string]int32{
	"QUEUED":    0,
	"RENDERING": 1,
	"ERROR":     2,
	"FINISHED":  3,
}

func (x JobStatus) String() string {
	return proto.EnumName(JobStatus_name, int32(x))
}

func (JobStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{0}
}

type QueueJobRequest struct {
	// Types that are valid to be assigned to Data:
	//	*QueueJobRequest_Request
	//	*QueueJobRequest_ChunkData
	Data                 isQueueJobRequest_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *QueueJobRequest) Reset()         { *m = QueueJobRequest{} }
func (m *QueueJobRequest) String() string { return proto.CompactTextString(m) }
func (*QueueJobRequest) ProtoMessage()    {}
func (*QueueJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{0}
}
func (m *QueueJobRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueJobRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueJobRequest.Merge(m, src)
}
func (m *QueueJobRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueueJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueueJobRequest proto.InternalMessageInfo

type isQueueJobRequest_Data interface {
	isQueueJobRequest_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueueJobRequest_Request struct {
	Request *JobRequest `protobuf:"bytes,1,opt,name=request,proto3,oneof" json:"request,omitempty"`
}
type QueueJobRequest_ChunkData struct {
	ChunkData []byte `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3,oneof" json:"chunk_data,omitempty"`
}

func (*QueueJobRequest_Request) isQueueJobRequest_Data()   {}
func (*QueueJobRequest_ChunkData) isQueueJobRequest_Data() {}

func (m *QueueJobRequest) GetData() isQueueJobRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *QueueJobRequest) GetRequest() *JobRequest {
	if x, ok := m.GetData().(*QueueJobRequest_Request); ok {
		return x.Request
	}
	return nil
}

func (m *QueueJobRequest) GetChunkData() []byte {
	if x, ok := m.GetData().(*QueueJobRequest_ChunkData); ok {
		return x.ChunkData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueueJobRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueueJobRequest_Request)(nil),
		(*QueueJobRequest_ChunkData)(nil),
	}
}

type JobRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ResolutionX          int64    `protobuf:"varint,2,opt,name=resolution_x,json=resolutionX,proto3" json:"resolution_x,omitempty"`
	ResolutionY          int64    `protobuf:"varint,3,opt,name=resolution_y,json=resolutionY,proto3" json:"resolution_y,omitempty"`
	ResolutionScale      int64    `protobuf:"varint,4,opt,name=resolution_scale,json=resolutionScale,proto3" json:"resolution_scale,omitempty"`
	RenderSamples        int64    `protobuf:"varint,5,opt,name=render_samples,json=renderSamples,proto3" json:"render_samples,omitempty"`
	RenderStartFrame     int64    `protobuf:"varint,6,opt,name=render_start_frame,json=renderStartFrame,proto3" json:"render_start_frame,omitempty"`
	RenderEndFrame       int64    `protobuf:"varint,7,opt,name=render_end_frame,json=renderEndFrame,proto3" json:"render_end_frame,omitempty"`
	RenderUseGPU         bool     `protobuf:"varint,8,opt,name=render_use_gpu,json=renderUseGpu,proto3" json:"render_use_gpu,omitempty"`
	RenderPriority       int64    `protobuf:"varint,9,opt,name=render_priority,json=renderPriority,proto3" json:"render_priority,omitempty"`
	CPU                  int64    `protobuf:"varint,10,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory               int64    `protobuf:"varint,11,opt,name=memory,proto3" json:"memory,omitempty"`
	RenderSlices         int64    `protobuf:"varint,12,opt,name=render_slices,json=renderSlices,proto3" json:"render_slices,omitempty"`
	ContentType          string   `protobuf:"bytes,13,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Namespace            string   `protobuf:"bytes,14,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobRequest) Reset()         { *m = JobRequest{} }
func (m *JobRequest) String() string { return proto.CompactTextString(m) }
func (*JobRequest) ProtoMessage()    {}
func (*JobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{1}
}
func (m *JobRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobRequest.Merge(m, src)
}
func (m *JobRequest) XXX_Size() int {
	return m.Size()
}
func (m *JobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobRequest proto.InternalMessageInfo

func (m *JobRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobRequest) GetResolutionX() int64 {
	if m != nil {
		return m.ResolutionX
	}
	return 0
}

func (m *JobRequest) GetResolutionY() int64 {
	if m != nil {
		return m.ResolutionY
	}
	return 0
}

func (m *JobRequest) GetResolutionScale() int64 {
	if m != nil {
		return m.ResolutionScale
	}
	return 0
}

func (m *JobRequest) GetRenderSamples() int64 {
	if m != nil {
		return m.RenderSamples
	}
	return 0
}

func (m *JobRequest) GetRenderStartFrame() int64 {
	if m != nil {
		return m.RenderStartFrame
	}
	return 0
}

func (m *JobRequest) GetRenderEndFrame() int64 {
	if m != nil {
		return m.RenderEndFrame
	}
	return 0
}

func (m *JobRequest) GetRenderUseGPU() bool {
	if m != nil {
		return m.RenderUseGPU
	}
	return false
}

func (m *JobRequest) GetRenderPriority() int64 {
	if m != nil {
		return m.RenderPriority
	}
	return 0
}

func (m *JobRequest) GetCPU() int64 {
	if m != nil {
		return m.CPU
	}
	return 0
}

func (m *JobRequest) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *JobRequest) GetRenderSlices() int64 {
	if m != nil {
		return m.RenderSlices
	}
	return 0
}

func (m *JobRequest) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *JobRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type QueueJobResponse struct {
	UUID                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueueJobResponse) Reset()         { *m = QueueJobResponse{} }
func (m *QueueJobResponse) String() string { return proto.CompactTextString(m) }
func (*QueueJobResponse) ProtoMessage()    {}
func (*QueueJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{2}
}
func (m *QueueJobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueJobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueJobResponse.Merge(m, src)
}
func (m *QueueJobResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueueJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueueJobResponse proto.InternalMessageInfo

func (m *QueueJobResponse) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type Worker struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	CPUs                 uint32   `protobuf:"varint,3,opt,name=cpus,proto3" json:"cpus,omitempty"`
	MemoryTotal          int64    `protobuf:"varint,4,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
	MemoryAvailable      int64    `protobuf:"varint,5,opt,name=memory_available,json=memoryAvailable,proto3" json:"memory_available,omitempty"`
	GPUs                 []string `protobuf:"bytes,6,rep,name=gpus,proto3" json:"gpus,omitempty"`
	Load1                float64  `protobuf:"fixed64,7,opt,name=load1,proto3" json:"load1,omitempty"`
	Load5                float64  `protobuf:"fixed64,8,opt,name=load5,proto3" json:"load5,omitempty"`
	Load15               float64  `protobuf:"fixed64,9,opt,name=load15,proto3" json:"load15,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Worker) Reset()         { *m = Worker{} }
func (m *Worker) String() string { return proto.CompactTextString(m) }
func (*Worker) ProtoMessage()    {}
func (*Worker) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{3}
}
func (m *Worker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Worker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Worker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Worker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Worker.Merge(m, src)
}
func (m *Worker) XXX_Size() int {
	return m.Size()
}
func (m *Worker) XXX_DiscardUnknown() {
	xxx_messageInfo_Worker.DiscardUnknown(m)
}

var xxx_messageInfo_Worker proto.InternalMessageInfo

func (m *Worker) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Worker) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Worker) GetCPUs() uint32 {
	if m != nil {
		return m.CPUs
	}
	return 0
}

func (m *Worker) GetMemoryTotal() int64 {
	if m != nil {
		return m.MemoryTotal
	}
	return 0
}

func (m *Worker) GetMemoryAvailable() int64 {
	if m != nil {
		return m.MemoryAvailable
	}
	return 0
}

func (m *Worker) GetGPUs() []string {
	if m != nil {
		return m.GPUs
	}
	return nil
}

func (m *Worker) GetLoad1() float64 {
	if m != nil {
		return m.Load1
	}
	return 0
}

func (m *Worker) GetLoad5() float64 {
	if m != nil {
		return m.Load5
	}
	return 0
}

func (m *Worker) GetLoad15() float64 {
	if m != nil {
		return m.Load15
	}
	return 0
}

type Job struct {
	ID                   string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Request              *JobRequest   `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	JobSource            string        `protobuf:"bytes,3,opt,name=job_source,json=jobSource,proto3" json:"job_source,omitempty"`
	OutputDir            string        `protobuf:"bytes,4,opt,name=output_dir,json=outputDir,proto3" json:"output_dir,omitempty"`
	Status               JobStatus     `protobuf:"varint,5,opt,name=status,proto3,enum=fynca.services.render.v1.JobStatus" json:"status,omitempty"`
	FrameJobs            []*FrameJob   `protobuf:"bytes,6,rep,name=frame_jobs,json=frameJobs,proto3" json:"frame_jobs,omitempty"`
	CreatedAt            time.Time     `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	QueuedAt             time.Time     `protobuf:"bytes,8,opt,name=queued_at,json=queuedAt,proto3,stdtime" json:"queued_at"`
	StartedAt            time.Time     `protobuf:"bytes,9,opt,name=started_at,json=startedAt,proto3,stdtime" json:"started_at"`
	FinishedAt           time.Time     `protobuf:"bytes,10,opt,name=finished_at,json=finishedAt,proto3,stdtime" json:"finished_at"`
	Duration             time.Duration `protobuf:"bytes,11,opt,name=duration,proto3,stdduration" json:"duration"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{4}
}
func (m *Job) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Job.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return m.Size()
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Job) GetRequest() *JobRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Job) GetJobSource() string {
	if m != nil {
		return m.JobSource
	}
	return ""
}

func (m *Job) GetOutputDir() string {
	if m != nil {
		return m.OutputDir
	}
	return ""
}

func (m *Job) GetStatus() JobStatus {
	if m != nil {
		return m.Status
	}
	return JobStatus_QUEUED
}

func (m *Job) GetFrameJobs() []*FrameJob {
	if m != nil {
		return m.FrameJobs
	}
	return nil
}

func (m *Job) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Job) GetQueuedAt() time.Time {
	if m != nil {
		return m.QueuedAt
	}
	return time.Time{}
}

func (m *Job) GetStartedAt() time.Time {
	if m != nil {
		return m.StartedAt
	}
	return time.Time{}
}

func (m *Job) GetFinishedAt() time.Time {
	if m != nil {
		return m.FinishedAt
	}
	return time.Time{}
}

func (m *Job) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

type FrameJob struct {
	ID                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Request              *JobRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	JobSource            string      `protobuf:"bytes,3,opt,name=job_source,json=jobSource,proto3" json:"job_source,omitempty"`
	RenderFrame          int64       `protobuf:"varint,4,opt,name=render_frame,json=renderFrame,proto3" json:"render_frame,omitempty"`
	SequenceID           uint64      `protobuf:"varint,5,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	Worker               *Worker     `protobuf:"bytes,6,opt,name=worker,proto3" json:"worker,omitempty"`
	SliceJobs            []*SliceJob `protobuf:"bytes,7,rep,name=slice_jobs,json=sliceJobs,proto3" json:"slice_jobs,omitempty"`
	QueuedAt             time.Time   `protobuf:"bytes,8,opt,name=queued_at,json=queuedAt,proto3,stdtime" json:"queued_at"`
	StartedAt            time.Time   `protobuf:"bytes,9,opt,name=started_at,json=startedAt,proto3,stdtime" json:"started_at"`
	FinishedAt           time.Time   `protobuf:"bytes,10,opt,name=finished_at,json=finishedAt,proto3,stdtime" json:"finished_at"`
	Status               JobStatus   `protobuf:"varint,11,opt,name=status,proto3,enum=fynca.services.render.v1.JobStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FrameJob) Reset()         { *m = FrameJob{} }
func (m *FrameJob) String() string { return proto.CompactTextString(m) }
func (*FrameJob) ProtoMessage()    {}
func (*FrameJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{5}
}
func (m *FrameJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrameJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrameJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrameJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrameJob.Merge(m, src)
}
func (m *FrameJob) XXX_Size() int {
	return m.Size()
}
func (m *FrameJob) XXX_DiscardUnknown() {
	xxx_messageInfo_FrameJob.DiscardUnknown(m)
}

var xxx_messageInfo_FrameJob proto.InternalMessageInfo

func (m *FrameJob) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *FrameJob) GetRequest() *JobRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *FrameJob) GetJobSource() string {
	if m != nil {
		return m.JobSource
	}
	return ""
}

func (m *FrameJob) GetRenderFrame() int64 {
	if m != nil {
		return m.RenderFrame
	}
	return 0
}

func (m *FrameJob) GetSequenceID() uint64 {
	if m != nil {
		return m.SequenceID
	}
	return 0
}

func (m *FrameJob) GetWorker() *Worker {
	if m != nil {
		return m.Worker
	}
	return nil
}

func (m *FrameJob) GetSliceJobs() []*SliceJob {
	if m != nil {
		return m.SliceJobs
	}
	return nil
}

func (m *FrameJob) GetQueuedAt() time.Time {
	if m != nil {
		return m.QueuedAt
	}
	return time.Time{}
}

func (m *FrameJob) GetStartedAt() time.Time {
	if m != nil {
		return m.StartedAt
	}
	return time.Time{}
}

func (m *FrameJob) GetFinishedAt() time.Time {
	if m != nil {
		return m.FinishedAt
	}
	return time.Time{}
}

func (m *FrameJob) GetStatus() JobStatus {
	if m != nil {
		return m.Status
	}
	return JobStatus_QUEUED
}

type SliceJob struct {
	ID                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Request              *JobRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	JobSource            string      `protobuf:"bytes,3,opt,name=job_source,json=jobSource,proto3" json:"job_source,omitempty"`
	SequenceID           uint64      `protobuf:"varint,4,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	RenderSliceIndex     int64       `protobuf:"varint,5,opt,name=render_slice_index,json=renderSliceIndex,proto3" json:"render_slice_index,omitempty"`
	RenderSliceMinX      float32     `protobuf:"fixed32,6,opt,name=render_slice_min_x,json=renderSliceMinX,proto3" json:"render_slice_min_x,omitempty"`
	RenderSliceMaxX      float32     `protobuf:"fixed32,7,opt,name=render_slice_max_x,json=renderSliceMaxX,proto3" json:"render_slice_max_x,omitempty"`
	RenderSliceMinY      float32     `protobuf:"fixed32,8,opt,name=render_slice_min_y,json=renderSliceMinY,proto3" json:"render_slice_min_y,omitempty"`
	RenderSliceMaxY      float32     `protobuf:"fixed32,9,opt,name=render_slice_max_y,json=renderSliceMaxY,proto3" json:"render_slice_max_y,omitempty"`
	RenderFrame          int64       `protobuf:"varint,10,opt,name=render_frame,json=renderFrame,proto3" json:"render_frame,omitempty"`
	Worker               *Worker     `protobuf:"bytes,11,opt,name=worker,proto3" json:"worker,omitempty"`
	QueuedAt             time.Time   `protobuf:"bytes,12,opt,name=queued_at,json=queuedAt,proto3,stdtime" json:"queued_at"`
	StartedAt            time.Time   `protobuf:"bytes,13,opt,name=started_at,json=startedAt,proto3,stdtime" json:"started_at"`
	FinishedAt           time.Time   `protobuf:"bytes,14,opt,name=finished_at,json=finishedAt,proto3,stdtime" json:"finished_at"`
	Status               JobStatus   `protobuf:"varint,15,opt,name=status,proto3,enum=fynca.services.render.v1.JobStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SliceJob) Reset()         { *m = SliceJob{} }
func (m *SliceJob) String() string { return proto.CompactTextString(m) }
func (*SliceJob) ProtoMessage()    {}
func (*SliceJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{6}
}
func (m *SliceJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SliceJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SliceJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SliceJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SliceJob.Merge(m, src)
}
func (m *SliceJob) XXX_Size() int {
	return m.Size()
}
func (m *SliceJob) XXX_DiscardUnknown() {
	xxx_messageInfo_SliceJob.DiscardUnknown(m)
}

var xxx_messageInfo_SliceJob proto.InternalMessageInfo

func (m *SliceJob) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *SliceJob) GetRequest() *JobRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SliceJob) GetJobSource() string {
	if m != nil {
		return m.JobSource
	}
	return ""
}

func (m *SliceJob) GetSequenceID() uint64 {
	if m != nil {
		return m.SequenceID
	}
	return 0
}

func (m *SliceJob) GetRenderSliceIndex() int64 {
	if m != nil {
		return m.RenderSliceIndex
	}
	return 0
}

func (m *SliceJob) GetRenderSliceMinX() float32 {
	if m != nil {
		return m.RenderSliceMinX
	}
	return 0
}

func (m *SliceJob) GetRenderSliceMaxX() float32 {
	if m != nil {
		return m.RenderSliceMaxX
	}
	return 0
}

func (m *SliceJob) GetRenderSliceMinY() float32 {
	if m != nil {
		return m.RenderSliceMinY
	}
	return 0
}

func (m *SliceJob) GetRenderSliceMaxY() float32 {
	if m != nil {
		return m.RenderSliceMaxY
	}
	return 0
}

func (m *SliceJob) GetRenderFrame() int64 {
	if m != nil {
		return m.RenderFrame
	}
	return 0
}

func (m *SliceJob) GetWorker() *Worker {
	if m != nil {
		return m.Worker
	}
	return nil
}

func (m *SliceJob) GetQueuedAt() time.Time {
	if m != nil {
		return m.QueuedAt
	}
	return time.Time{}
}

func (m *SliceJob) GetStartedAt() time.Time {
	if m != nil {
		return m.StartedAt
	}
	return time.Time{}
}

func (m *SliceJob) GetFinishedAt() time.Time {
	if m != nil {
		return m.FinishedAt
	}
	return time.Time{}
}

func (m *SliceJob) GetStatus() JobStatus {
	if m != nil {
		return m.Status
	}
	return JobStatus_QUEUED
}

type WorkerJob struct {
	// Types that are valid to be assigned to Job:
	//	*WorkerJob_FrameJob
	//	*WorkerJob_SliceJob
	Job                  isWorkerJob_Job `protobuf_oneof:"job"`
	ID                   string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *WorkerJob) Reset()         { *m = WorkerJob{} }
func (m *WorkerJob) String() string { return proto.CompactTextString(m) }
func (*WorkerJob) ProtoMessage()    {}
func (*WorkerJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{7}
}
func (m *WorkerJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerJob.Merge(m, src)
}
func (m *WorkerJob) XXX_Size() int {
	return m.Size()
}
func (m *WorkerJob) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerJob.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerJob proto.InternalMessageInfo

type isWorkerJob_Job interface {
	isWorkerJob_Job()
	MarshalTo([]byte) (int, error)
	Size() int
}

type WorkerJob_FrameJob struct {
	FrameJob *FrameJob `protobuf:"bytes,1,opt,name=frame_job,json=frameJob,proto3,oneof" json:"frame_job,omitempty"`
}
type WorkerJob_SliceJob struct {
	SliceJob *SliceJob `protobuf:"bytes,2,opt,name=slice_job,json=sliceJob,proto3,oneof" json:"slice_job,omitempty"`
}

func (*WorkerJob_FrameJob) isWorkerJob_Job() {}
func (*WorkerJob_SliceJob) isWorkerJob_Job() {}

func (m *WorkerJob) GetJob() isWorkerJob_Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *WorkerJob) GetFrameJob() *FrameJob {
	if x, ok := m.GetJob().(*WorkerJob_FrameJob); ok {
		return x.FrameJob
	}
	return nil
}

func (m *WorkerJob) GetSliceJob() *SliceJob {
	if x, ok := m.GetJob().(*WorkerJob_SliceJob); ok {
		return x.SliceJob
	}
	return nil
}

func (m *WorkerJob) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WorkerJob) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WorkerJob_FrameJob)(nil),
		(*WorkerJob_SliceJob)(nil),
	}
}

type JobResult struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Types that are valid to be assigned to Result:
	//	*JobResult_FrameJob
	//	*JobResult_SliceJob
	Result               isJobResult_Result `protobuf_oneof:"result"`
	Duration             time.Duration      `protobuf:"bytes,4,opt,name=duration,proto3,stdduration" json:"duration"`
	RenderFrame          int64              `protobuf:"varint,5,opt,name=render_frame,json=renderFrame,proto3" json:"render_frame,omitempty"`
	Status               JobStatus          `protobuf:"varint,6,opt,name=status,proto3,enum=fynca.services.render.v1.JobStatus" json:"status,omitempty"`
	Error                string             `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *JobResult) Reset()         { *m = JobResult{} }
func (m *JobResult) String() string { return proto.CompactTextString(m) }
func (*JobResult) ProtoMessage()    {}
func (*JobResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{8}
}
func (m *JobResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobResult.Merge(m, src)
}
func (m *JobResult) XXX_Size() int {
	return m.Size()
}
func (m *JobResult) XXX_DiscardUnknown() {
	xxx_messageInfo_JobResult.DiscardUnknown(m)
}

var xxx_messageInfo_JobResult proto.InternalMessageInfo

type isJobResult_Result interface {
	isJobResult_Result()
	MarshalTo([]byte) (int, error)
	Size() int
}

type JobResult_FrameJob struct {
	FrameJob *FrameJob `protobuf:"bytes,2,opt,name=frame_job,json=frameJob,proto3,oneof" json:"frame_job,omitempty"`
}
type JobResult_SliceJob struct {
	SliceJob *SliceJob `protobuf:"bytes,3,opt,name=slice_job,json=sliceJob,proto3,oneof" json:"slice_job,omitempty"`
}

func (*JobResult_FrameJob) isJobResult_Result() {}
func (*JobResult_SliceJob) isJobResult_Result() {}

func (m *JobResult) GetResult() isJobResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *JobResult) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *JobResult) GetFrameJob() *FrameJob {
	if x, ok := m.GetResult().(*JobResult_FrameJob); ok {
		return x.FrameJob
	}
	return nil
}

func (m *JobResult) GetSliceJob() *SliceJob {
	if x, ok := m.GetResult().(*JobResult_SliceJob); ok {
		return x.SliceJob
	}
	return nil
}

func (m *JobResult) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *JobResult) GetRenderFrame() int64 {
	if m != nil {
		return m.RenderFrame
	}
	return 0
}

func (m *JobResult) GetStatus() JobStatus {
	if m != nil {
		return m.Status
	}
	return JobStatus_QUEUED
}

func (m *JobResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*JobResult) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*JobResult_FrameJob)(nil),
		(*JobResult_SliceJob)(nil),
	}
}

type ListJobsRequest struct {
	ExcludeFrames        bool     `protobuf:"varint,1,opt,name=exclude_frames,json=excludeFrames,proto3" json:"exclude_frames,omitempty"`
	ExcludeSlices        bool     `protobuf:"varint,2,opt,name=exclude_slices,json=excludeSlices,proto3" json:"exclude_slices,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListJobsRequest) Reset()         { *m = ListJobsRequest{} }
func (m *ListJobsRequest) String() string { return proto.CompactTextString(m) }
func (*ListJobsRequest) ProtoMessage()    {}
func (*ListJobsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{9}
}
func (m *ListJobsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListJobsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListJobsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListJobsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListJobsRequest.Merge(m, src)
}
func (m *ListJobsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListJobsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListJobsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListJobsRequest proto.InternalMessageInfo

func (m *ListJobsRequest) GetExcludeFrames() bool {
	if m != nil {
		return m.ExcludeFrames
	}
	return false
}

func (m *ListJobsRequest) GetExcludeSlices() bool {
	if m != nil {
		return m.ExcludeSlices
	}
	return false
}

type ListJobsResponse struct {
	Jobs                 []*Job   `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListJobsResponse) Reset()         { *m = ListJobsResponse{} }
func (m *ListJobsResponse) String() string { return proto.CompactTextString(m) }
func (*ListJobsResponse) ProtoMessage()    {}
func (*ListJobsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{10}
}
func (m *ListJobsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListJobsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListJobsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListJobsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListJobsResponse.Merge(m, src)
}
func (m *ListJobsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListJobsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListJobsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListJobsResponse proto.InternalMessageInfo

func (m *ListJobsResponse) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type GetJobRequest struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetJobRequest) Reset()         { *m = GetJobRequest{} }
func (m *GetJobRequest) String() string { return proto.CompactTextString(m) }
func (*GetJobRequest) ProtoMessage()    {}
func (*GetJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{11}
}
func (m *GetJobRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJobRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobRequest.Merge(m, src)
}
func (m *GetJobRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobRequest proto.InternalMessageInfo

func (m *GetJobRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type GetJobResponse struct {
	Job                  *Job     `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetJobResponse) Reset()         { *m = GetJobResponse{} }
func (m *GetJobResponse) String() string { return proto.CompactTextString(m) }
func (*GetJobResponse) ProtoMessage()    {}
func (*GetJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{12}
}
func (m *GetJobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobResponse.Merge(m, src)
}
func (m *GetJobResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobResponse proto.InternalMessageInfo

func (m *GetJobResponse) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type ListWorkersRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListWorkersRequest) Reset()         { *m = ListWorkersRequest{} }
func (m *ListWorkersRequest) String() string { return proto.CompactTextString(m) }
func (*ListWorkersRequest) ProtoMessage()    {}
func (*ListWorkersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{13}
}
func (m *ListWorkersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWorkersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWorkersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWorkersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWorkersRequest.Merge(m, src)
}
func (m *ListWorkersRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWorkersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWorkersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWorkersRequest proto.InternalMessageInfo

type ListWorkersResponse struct {
	Workers              []*Worker `protobuf:"bytes,1,rep,name=workers,proto3" json:"workers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListWorkersResponse) Reset()         { *m = ListWorkersResponse{} }
func (m *ListWorkersResponse) String() string { return proto.CompactTextString(m) }
func (*ListWorkersResponse) ProtoMessage()    {}
func (*ListWorkersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{14}
}
func (m *ListWorkersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWorkersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWorkersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWorkersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWorkersResponse.Merge(m, src)
}
func (m *ListWorkersResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWorkersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWorkersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWorkersResponse proto.InternalMessageInfo

func (m *ListWorkersResponse) GetWorkers() []*Worker {
	if m != nil {
		return m.Workers
	}
	return nil
}

type DeleteJobRequest struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteJobRequest) Reset()         { *m = DeleteJobRequest{} }
func (m *DeleteJobRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteJobRequest) ProtoMessage()    {}
func (*DeleteJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{15}
}
func (m *DeleteJobRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteJobRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteJobRequest.Merge(m, src)
}
func (m *DeleteJobRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteJobRequest proto.InternalMessageInfo

func (m *DeleteJobRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type GetLatestRenderRequest struct {
	ID                   string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Frame                int64         `protobuf:"varint,2,opt,name=frame,proto3" json:"frame,omitempty"`
	TTL                  time.Duration `protobuf:"bytes,3,opt,name=ttl,proto3,stdduration" json:"ttl"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetLatestRenderRequest) Reset()         { *m = GetLatestRenderRequest{} }
func (m *GetLatestRenderRequest) String() string { return proto.CompactTextString(m) }
func (*GetLatestRenderRequest) ProtoMessage()    {}
func (*GetLatestRenderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{16}
}
func (m *GetLatestRenderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLatestRenderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLatestRenderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLatestRenderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestRenderRequest.Merge(m, src)
}
func (m *GetLatestRenderRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLatestRenderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestRenderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestRenderRequest proto.InternalMessageInfo

func (m *GetLatestRenderRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *GetLatestRenderRequest) GetFrame() int64 {
	if m != nil {
		return m.Frame
	}
	return 0
}

func (m *GetLatestRenderRequest) GetTTL() time.Duration {
	if m != nil {
		return m.TTL
	}
	return 0
}

type GetLatestRenderResponse struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Frame                int64    `protobuf:"varint,2,opt,name=frame,proto3" json:"frame,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLatestRenderResponse) Reset()         { *m = GetLatestRenderResponse{} }
func (m *GetLatestRenderResponse) String() string { return proto.CompactTextString(m) }
func (*GetLatestRenderResponse) ProtoMessage()    {}
func (*GetLatestRenderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{17}
}
func (m *GetLatestRenderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLatestRenderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLatestRenderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLatestRenderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestRenderResponse.Merge(m, src)
}
func (m *GetLatestRenderResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLatestRenderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestRenderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestRenderResponse proto.InternalMessageInfo

func (m *GetLatestRenderResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *GetLatestRenderResponse) GetFrame() int64 {
	if m != nil {
		return m.Frame
	}
	return 0
}

type ControlWorkerRequest struct {
	WorkerID string `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*ControlWorkerRequest_Stop
	Message              isControlWorkerRequest_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ControlWorkerRequest) Reset()         { *m = ControlWorkerRequest{} }
func (m *ControlWorkerRequest) String() string { return proto.CompactTextString(m) }
func (*ControlWorkerRequest) ProtoMessage()    {}
func (*ControlWorkerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{18}
}
func (m *ControlWorkerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControlWorkerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControlWorkerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ControlWorkerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlWorkerRequest.Merge(m, src)
}
func (m *ControlWorkerRequest) XXX_Size() int {
	return m.Size()
}
func (m *ControlWorkerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlWorkerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ControlWorkerRequest proto.InternalMessageInfo

type isControlWorkerRequest_Message interface {
	isControlWorkerRequest_Message()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ControlWorkerRequest_Stop struct {
	Stop *WorkerStop `protobuf:"bytes,2,opt,name=stop,proto3,oneof" json:"stop,omitempty"`
}

func (*ControlWorkerRequest_Stop) isControlWorkerRequest_Message() {}

func (m *ControlWorkerRequest) GetMessage() isControlWorkerRequest_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ControlWorkerRequest) GetWorkerID() string {
	if m != nil {
		return m.WorkerID
	}
	return ""
}

func (m *ControlWorkerRequest) GetStop() *WorkerStop {
	if x, ok := m.GetMessage().(*ControlWorkerRequest_Stop); ok {
		return x.Stop
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ControlWorkerRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ControlWorkerRequest_Stop)(nil),
	}
}

type WorkerStop struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkerStop) Reset()         { *m = WorkerStop{} }
func (m *WorkerStop) String() string { return proto.CompactTextString(m) }
func (*WorkerStop) ProtoMessage()    {}
func (*WorkerStop) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{19}
}
func (m *WorkerStop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerStop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerStop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerStop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerStop.Merge(m, src)
}
func (m *WorkerStop) XXX_Size() int {
	return m.Size()
}
func (m *WorkerStop) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerStop.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerStop proto.InternalMessageInfo

type ControlWorkerResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlWorkerResponse) Reset()         { *m = ControlWorkerResponse{} }
func (m *ControlWorkerResponse) String() string { return proto.CompactTextString(m) }
func (*ControlWorkerResponse) ProtoMessage()    {}
func (*ControlWorkerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{20}
}
func (m *ControlWorkerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControlWorkerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControlWorkerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ControlWorkerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlWorkerResponse.Merge(m, src)
}
func (m *ControlWorkerResponse) XXX_Size() int {
	return m.Size()
}
func (m *ControlWorkerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlWorkerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ControlWorkerResponse proto.InternalMessageInfo

type VersionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionRequest) Reset()         { *m = VersionRequest{} }
func (m *VersionRequest) String() string { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()    {}
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{21}
}
func (m *VersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionRequest.Merge(m, src)
}
func (m *VersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *VersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VersionRequest proto.InternalMessageInfo

type VersionResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Build                string   `protobuf:"bytes,3,opt,name=build,proto3" json:"build,omitempty"`
	Commit               string   `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
	Authenticator        string   `protobuf:"bytes,5,opt,name=authenticator,proto3" json:"authenticator,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionResponse) Reset()         { *m = VersionResponse{} }
func (m *VersionResponse) String() string { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()    {}
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{22}
}
func (m *VersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionResponse.Merge(m, src)
}
func (m *VersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *VersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VersionResponse proto.InternalMessageInfo

func (m *VersionResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *VersionResponse) GetBuild() string {
	if m != nil {
		return m.Build
	}
	return ""
}

func (m *VersionResponse) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *VersionResponse) GetAuthenticator() string {
	if m != nil {
		return m.Authenticator
	}
	return ""
}

type RenderLogRequest struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Frame                int64    `protobuf:"varint,2,opt,name=frame,proto3" json:"frame,omitempty"`
	Slice                int64    `protobuf:"varint,3,opt,name=slice,proto3" json:"slice,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenderLogRequest) Reset()         { *m = RenderLogRequest{} }
func (m *RenderLogRequest) String() string { return proto.CompactTextString(m) }
func (*RenderLogRequest) ProtoMessage()    {}
func (*RenderLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{23}
}
func (m *RenderLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenderLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenderLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenderLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderLogRequest.Merge(m, src)
}
func (m *RenderLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *RenderLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RenderLogRequest proto.InternalMessageInfo

func (m *RenderLogRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *RenderLogRequest) GetFrame() int64 {
	if m != nil {
		return m.Frame
	}
	return 0
}

func (m *RenderLogRequest) GetSlice() int64 {
	if m != nil {
		return m.Slice
	}
	return 0
}

type RenderLog struct {
	Log                  string   `protobuf:"bytes,1,opt,name=log,proto3" json:"log,omitempty"`
	Frame                int64    `protobuf:"varint,2,opt,name=frame,proto3" json:"frame,omitempty"`
	Slice                int64    `protobuf:"varint,3,opt,name=slice,proto3" json:"slice,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenderLog) Reset()         { *m = RenderLog{} }
func (m *RenderLog) String() string { return proto.CompactTextString(m) }
func (*RenderLog) ProtoMessage()    {}
func (*RenderLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{24}
}
func (m *RenderLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenderLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenderLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenderLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderLog.Merge(m, src)
}
func (m *RenderLog) XXX_Size() int {
	return m.Size()
}
func (m *RenderLog) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderLog.DiscardUnknown(m)
}

var xxx_messageInfo_RenderLog proto.InternalMessageInfo

func (m *RenderLog) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

func (m *RenderLog) GetFrame() int64 {
	if m != nil {
		return m.Frame
	}
	return 0
}

func (m *RenderLog) GetSlice() int64 {
	if m != nil {
		return m.Slice
	}
	return 0
}

type RenderLogResponse struct {
	RenderLog            *RenderLog `protobuf:"bytes,1,opt,name=render_log,json=renderLog,proto3" json:"render_log,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RenderLogResponse) Reset()         { *m = RenderLogResponse{} }
func (m *RenderLogResponse) String() string { return proto.CompactTextString(m) }
func (*RenderLogResponse) ProtoMessage()    {}
func (*RenderLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{25}
}
func (m *RenderLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenderLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenderLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenderLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderLogResponse.Merge(m, src)
}
func (m *RenderLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *RenderLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RenderLogResponse proto.InternalMessageInfo

func (m *RenderLogResponse) GetRenderLog() *RenderLog {
	if m != nil {
		return m.RenderLog
	}
	return nil
}

type JobLogRequest struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobLogRequest) Reset()         { *m = JobLogRequest{} }
func (m *JobLogRequest) String() string { return proto.CompactTextString(m) }
func (*JobLogRequest) ProtoMessage()    {}
func (*JobLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{26}
}
func (m *JobLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobLogRequest.Merge(m, src)
}
func (m *JobLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *JobLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobLogRequest proto.InternalMessageInfo

func (m *JobLogRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type JobLog struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Log                  string   `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobLog) Reset()         { *m = JobLog{} }
func (m *JobLog) String() string { return proto.CompactTextString(m) }
func (*JobLog) ProtoMessage()    {}
func (*JobLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{27}
}
func (m *JobLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobLog.Merge(m, src)
}
func (m *JobLog) XXX_Size() int {
	return m.Size()
}
func (m *JobLog) XXX_DiscardUnknown() {
	xxx_messageInfo_JobLog.DiscardUnknown(m)
}

var xxx_messageInfo_JobLog proto.InternalMessageInfo

func (m *JobLog) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *JobLog) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *JobLog) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

type JobLogResponse struct {
	JobLog               *JobLog  `protobuf:"bytes,1,opt,name=job_log,json=jobLog,proto3" json:"job_log,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobLogResponse) Reset()         { *m = JobLogResponse{} }
func (m *JobLogResponse) String() string { return proto.CompactTextString(m) }
func (*JobLogResponse) ProtoMessage()    {}
func (*JobLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{28}
}
func (m *JobLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobLogResponse.Merge(m, src)
}
func (m *JobLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *JobLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JobLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JobLogResponse proto.InternalMessageInfo

func (m *JobLogResponse) GetJobLog() *JobLog {
	if m != nil {
		return m.JobLog
	}
	return nil
}

type GetJobArchiveRequest struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetJobArchiveRequest) Reset()         { *m = GetJobArchiveRequest{} }
func (m *GetJobArchiveRequest) String() string { return proto.CompactTextString(m) }
func (*GetJobArchiveRequest) ProtoMessage()    {}
func (*GetJobArchiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{29}
}
func (m *GetJobArchiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJobArchiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJobArchiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJobArchiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobArchiveRequest.Merge(m, src)
}
func (m *GetJobArchiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetJobArchiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobArchiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobArchiveRequest proto.InternalMessageInfo

func (m *GetJobArchiveRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type JobArchive struct {
	ArchiveUrl           string   `protobuf:"bytes,1,opt,name=archive_url,json=archiveUrl,proto3" json:"archive_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobArchive) Reset()         { *m = JobArchive{} }
func (m *JobArchive) String() string { return proto.CompactTextString(m) }
func (*JobArchive) ProtoMessage()    {}
func (*JobArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{30}
}
func (m *JobArchive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobArchive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobArchive.Merge(m, src)
}
func (m *JobArchive) XXX_Size() int {
	return m.Size()
}
func (m *JobArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_JobArchive.DiscardUnknown(m)
}

var xxx_messageInfo_JobArchive proto.InternalMessageInfo

func (m *JobArchive) GetArchiveUrl() string {
	if m != nil {
		return m.ArchiveUrl
	}
	return ""
}

type GetJobArchiveResponse struct {
	ID                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	JobArchive           *JobArchive `protobuf:"bytes,2,opt,name=job_archive,json=jobArchive,proto3" json:"job_archive,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetJobArchiveResponse) Reset()         { *m = GetJobArchiveResponse{} }
func (m *GetJobArchiveResponse) String() string { return proto.CompactTextString(m) }
func (*GetJobArchiveResponse) ProtoMessage()    {}
func (*GetJobArchiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03945b1697b61585, []int{31}
}
func (m *GetJobArchiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJobArchiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJobArchiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJobArchiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobArchiveResponse.Merge(m, src)
}
func (m *GetJobArchiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetJobArchiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobArchiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobArchiveResponse proto.InternalMessageInfo

func (m *GetJobArchiveResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *GetJobArchiveResponse) GetJobArchive() *JobArchive {
	if m != nil {
		return m.JobArchive
	}
	return nil
}

func init() {
	proto.RegisterEnum("fynca.services.render.v1.JobStatus", JobStatus_name, JobStatus_value)
	proto.RegisterType((*QueueJobRequest)(nil), "fynca.services.render.v1.QueueJobRequest")
	proto.RegisterType((*JobRequest)(nil), "fynca.services.render.v1.JobRequest")
	proto.RegisterType((*QueueJobResponse)(nil), "fynca.services.render.v1.QueueJobResponse")
	proto.RegisterType((*Worker)(nil), "fynca.services.render.v1.Worker")
	proto.RegisterType((*Job)(nil), "fynca.services.render.v1.Job")
	proto.RegisterType((*FrameJob)(nil), "fynca.services.render.v1.FrameJob")
	proto.RegisterType((*SliceJob)(nil), "fynca.services.render.v1.SliceJob")
	proto.RegisterType((*WorkerJob)(nil), "fynca.services.render.v1.WorkerJob")
	proto.RegisterType((*JobResult)(nil), "fynca.services.render.v1.JobResult")
	proto.RegisterType((*ListJobsRequest)(nil), "fynca.services.render.v1.ListJobsRequest")
	proto.RegisterType((*ListJobsResponse)(nil), "fynca.services.render.v1.ListJobsResponse")
	proto.RegisterType((*GetJobRequest)(nil), "fynca.services.render.v1.GetJobRequest")
	proto.RegisterType((*GetJobResponse)(nil), "fynca.services.render.v1.GetJobResponse")
	proto.RegisterType((*ListWorkersRequest)(nil), "fynca.services.render.v1.ListWorkersRequest")
	proto.RegisterType((*ListWorkersResponse)(nil), "fynca.services.render.v1.ListWorkersResponse")
	proto.RegisterType((*DeleteJobRequest)(nil), "fynca.services.render.v1.DeleteJobRequest")
	proto.RegisterType((*GetLatestRenderRequest)(nil), "fynca.services.render.v1.GetLatestRenderRequest")
	proto.RegisterType((*GetLatestRenderResponse)(nil), "fynca.services.render.v1.GetLatestRenderResponse")
	proto.RegisterType((*ControlWorkerRequest)(nil), "fynca.services.render.v1.ControlWorkerRequest")
	proto.RegisterType((*WorkerStop)(nil), "fynca.services.render.v1.WorkerStop")
	proto.RegisterType((*ControlWorkerResponse)(nil), "fynca.services.render.v1.ControlWorkerResponse")
	proto.RegisterType((*VersionRequest)(nil), "fynca.services.render.v1.VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "fynca.services.render.v1.VersionResponse")
	proto.RegisterType((*RenderLogRequest)(nil), "fynca.services.render.v1.RenderLogRequest")
	proto.RegisterType((*RenderLog)(nil), "fynca.services.render.v1.RenderLog")
	proto.RegisterType((*RenderLogResponse)(nil), "fynca.services.render.v1.RenderLogResponse")
	proto.RegisterType((*JobLogRequest)(nil), "fynca.services.render.v1.JobLogRequest")
	proto.RegisterType((*JobLog)(nil), "fynca.services.render.v1.JobLog")
	proto.RegisterType((*JobLogResponse)(nil), "fynca.services.render.v1.JobLogResponse")
	proto.RegisterType((*GetJobArchiveRequest)(nil), "fynca.services.render.v1.GetJobArchiveRequest")
	proto.RegisterType((*JobArchive)(nil), "fynca.services.render.v1.JobArchive")
	proto.RegisterType((*GetJobArchiveResponse)(nil), "fynca.services.render.v1.GetJobArchiveResponse")
}

func init() {
	proto.RegisterFile("git.underland.io/ehazlett/fynca/api/services/render/v1/render.proto", fileDescriptor_03945b1697b61585)
}

var fileDescriptor_03945b1697b61585 = []byte{
	// 1972 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x59, 0x4b, 0x6f, 0x23, 0xc7,
	0x11, 0xd6, 0xf0, 0x39, 0x53, 0x7c, 0xa6, 0x23, 0xaf, 0x69, 0x26, 0x5e, 0x2a, 0x63, 0x1b, 0xab,
	0x5d, 0xdb, 0xa4, 0x57, 0xc1, 0x06, 0x89, 0x9d, 0xc4, 0x21, 0x45, 0x5a, 0xe2, 0x7a, 0xb3, 0xd6,
	0x8e, 0x44, 0x7b, 0x37, 0x01, 0x42, 0x0c, 0xc9, 0x16, 0x35, 0xf2, 0x70, 0x7a, 0x3c, 0xd3, 0xa3,
	0x88, 0x41, 0x8e, 0x3e, 0x04, 0x39, 0x05, 0xc8, 0x25, 0x3f, 0x23, 0x3f, 0xc3, 0xc7, 0xfc, 0x02,
	0x25, 0xe0, 0x2d, 0x37, 0xff, 0x81, 0x00, 0x41, 0x3f, 0x86, 0x4f, 0xf1, 0xb5, 0x36, 0x60, 0xc0,
	0x27, 0x75, 0x57, 0x7f, 0x55, 0xdd, 0x55, 0xfd, 0x55, 0x55, 0x0f, 0x05, 0x87, 0x7d, 0x8b, 0x96,
	0x03, 0xa7, 0x87, 0x3d, 0xdb, 0x74, 0x7a, 0x65, 0x8b, 0x54, 0xf0, 0x85, 0xf9, 0x27, 0x1b, 0x53,
	0x5a, 0x39, 0x1f, 0x3a, 0x5d, 0xb3, 0x62, 0xba, 0x56, 0xc5, 0xc7, 0xde, 0x95, 0xd5, 0xc5, 0x7e,
	0xc5, 0xc3, 0x0c, 0x59, 0xb9, 0x7a, 0x28, 0x47, 0x65, 0xd7, 0x23, 0x94, 0xa0, 0x02, 0x87, 0x96,
	0x43, 0x58, 0x59, 0x2e, 0x5e, 0x3d, 0x2c, 0xee, 0xf6, 0x49, 0x9f, 0x70, 0x50, 0x85, 0x8d, 0x04,
	0xbe, 0x78, 0xb7, 0x4f, 0x48, 0xdf, 0xc6, 0x15, 0x3e, 0xeb, 0x04, 0xe7, 0x95, 0x5e, 0xe0, 0x99,
	0xd4, 0x22, 0x8e, 0x5c, 0x2f, 0xcd, 0xaf, 0x53, 0x6b, 0x80, 0x7d, 0x6a, 0x0e, 0x5c, 0x09, 0xf8,
	0xd1, 0x3c, 0x00, 0x0f, 0x5c, 0x3a, 0x14, 0x8b, 0xfa, 0x9f, 0x21, 0xf7, 0x2c, 0xc0, 0x01, 0x7e,
	0x4c, 0x3a, 0x06, 0xfe, 0x22, 0xc0, 0x3e, 0x45, 0xbf, 0x81, 0xa4, 0x27, 0x86, 0x05, 0x65, 0x4f,
	0xd9, 0x4f, 0x1d, 0xbc, 0x59, 0x5e, 0x76, 0xe4, 0xf2, 0x44, 0xed, 0x78, 0xc7, 0x08, 0xd5, 0x50,
	0x09, 0xa0, 0x7b, 0x11, 0x38, 0x9f, 0xb7, 0x7b, 0x26, 0x35, 0x0b, 0x91, 0x3d, 0x65, 0x3f, 0x7d,
	0xbc, 0x63, 0x68, 0x5c, 0x56, 0x37, 0xa9, 0x59, 0x4b, 0x40, 0x8c, 0x2d, 0xe9, 0x7f, 0x8d, 0x01,
	0x4c, 0xed, 0x8c, 0x20, 0xe6, 0x98, 0x03, 0xcc, 0xb7, 0xd5, 0x0c, 0x3e, 0x46, 0x3f, 0x81, 0xb4,
	0x87, 0x7d, 0x62, 0x07, 0xcc, 0xe5, 0xf6, 0x35, 0xb7, 0x16, 0x35, 0x52, 0x13, 0xd9, 0xf3, 0x39,
	0xc8, 0xb0, 0x10, 0x9d, 0x87, 0xbc, 0x40, 0xf7, 0x21, 0x3f, 0x05, 0xf1, 0xbb, 0xa6, 0x8d, 0x0b,
	0x31, 0x0e, 0xcb, 0x4d, 0xe4, 0xa7, 0x4c, 0x8c, 0xde, 0x82, 0xac, 0xf0, 0xaf, 0xed, 0x9b, 0x03,
	0xd7, 0xc6, 0x7e, 0x21, 0xce, 0x81, 0x19, 0x21, 0x3d, 0x15, 0x42, 0xf4, 0x0e, 0xa0, 0x10, 0x46,
	0x4d, 0x8f, 0xb6, 0xcf, 0x3d, 0x76, 0xf2, 0x04, 0x87, 0xe6, 0x25, 0x94, 0x2d, 0x7c, 0xc4, 0xe4,
	0x68, 0x1f, 0xa4, 0xac, 0x8d, 0x9d, 0x9e, 0xc4, 0x26, 0x39, 0x56, 0x6e, 0xd6, 0x70, 0x7a, 0x02,
	0xf9, 0xb3, 0xf1, 0xf6, 0x81, 0x8f, 0xdb, 0x7d, 0x37, 0x28, 0xa8, 0x7b, 0xca, 0xbe, 0x5a, 0xcb,
	0x8f, 0x6e, 0x4a, 0x69, 0x83, 0xaf, 0xb4, 0x7c, 0x7c, 0x74, 0xd2, 0x32, 0xd2, 0xde, 0x78, 0xe6,
	0x06, 0xe8, 0x1e, 0xe4, 0xa4, 0x9e, 0xeb, 0x59, 0xc4, 0xb3, 0xe8, 0xb0, 0xa0, 0x4d, 0x6f, 0x70,
	0x22, 0xa5, 0xe8, 0x35, 0x88, 0x76, 0xdd, 0xa0, 0x00, 0x6c, 0xb1, 0x96, 0x1c, 0xdd, 0x94, 0xa2,
	0x87, 0x27, 0x2d, 0x83, 0xc9, 0xd0, 0x1d, 0x48, 0x0c, 0xf0, 0x80, 0x78, 0xc3, 0x42, 0x8a, 0xab,
	0xca, 0x19, 0x7a, 0x03, 0x32, 0xa1, 0xaf, 0x36, 0x23, 0x40, 0x21, 0xcd, 0x97, 0xe5, 0x01, 0x4e,
	0xb9, 0x8c, 0xdd, 0x42, 0x97, 0x38, 0x14, 0x3b, 0xb4, 0x4d, 0x87, 0x2e, 0x2e, 0x64, 0xf8, 0x25,
	0xa6, 0xa4, 0xec, 0x6c, 0xe8, 0x62, 0xf4, 0x63, 0xd0, 0xd8, 0x9d, 0xfa, 0xae, 0xd9, 0xc5, 0x85,
	0x2c, 0x5f, 0x9f, 0x08, 0xf4, 0xf7, 0x20, 0x3f, 0xa1, 0xa2, 0xef, 0x12, 0xc7, 0x67, 0x1a, 0xb1,
	0x20, 0xb0, 0x7a, 0x82, 0x11, 0x35, 0x75, 0x74, 0x53, 0x8a, 0xb5, 0x5a, 0xcd, 0xba, 0xc1, 0xa5,
	0xfa, 0x97, 0x11, 0x48, 0x7c, 0x46, 0xbc, 0xcf, 0xb1, 0x77, 0x2b, 0x75, 0x0a, 0x90, 0xbc, 0xc2,
	0x9e, 0x6f, 0x11, 0x87, 0xb3, 0x46, 0x33, 0xc2, 0x29, 0x33, 0xdb, 0x75, 0x03, 0x9f, 0x33, 0x25,
	0x23, 0xcc, 0x1e, 0x9e, 0xb4, 0x7c, 0x83, 0x4b, 0x99, 0x27, 0xc2, 0xf1, 0x36, 0x25, 0xd4, 0xb4,
	0x25, 0x51, 0x52, 0x42, 0x76, 0xc6, 0x44, 0x8c, 0x4f, 0x12, 0x62, 0x5e, 0x99, 0x96, 0x6d, 0x76,
	0x6c, 0x2c, 0x69, 0x92, 0x13, 0xf2, 0x6a, 0x28, 0x66, 0x7b, 0xf5, 0xd9, 0x5e, 0x89, 0xbd, 0x68,
	0xe8, 0xc2, 0x11, 0xdf, 0x8b, 0x49, 0xd1, 0x2e, 0xc4, 0x6d, 0x62, 0xf6, 0x1e, 0x72, 0x36, 0x28,
	0x86, 0x98, 0x84, 0xd2, 0x47, 0xfc, 0xee, 0xa5, 0xf4, 0x11, 0xbb, 0x1e, 0xbe, 0xfc, 0x88, 0xdf,
	0xac, 0x62, 0xc8, 0x99, 0xfe, 0x75, 0x0c, 0xa2, 0x8f, 0x49, 0x07, 0xdd, 0x81, 0xc8, 0x38, 0x54,
	0x89, 0xd1, 0x4d, 0x29, 0xd2, 0xac, 0x1b, 0x11, 0xab, 0x87, 0x7e, 0x3d, 0x49, 0xe8, 0xc8, 0xe6,
	0x09, 0x3d, 0x49, 0xe7, 0xd7, 0x01, 0x2e, 0x49, 0xa7, 0xed, 0x93, 0xc0, 0xeb, 0x62, 0x1e, 0x33,
	0xcd, 0xd0, 0x2e, 0x49, 0xe7, 0x94, 0x0b, 0xd8, 0x32, 0x09, 0xa8, 0x1b, 0xd0, 0x76, 0xcf, 0xf2,
	0x78, 0xb0, 0x34, 0x43, 0x13, 0x92, 0xba, 0xe5, 0xa1, 0x0f, 0x20, 0xe1, 0x53, 0x93, 0x06, 0x22,
	0x8f, 0xb2, 0x07, 0x6f, 0xac, 0xdc, 0xfc, 0x94, 0x43, 0x0d, 0xa9, 0x82, 0xaa, 0x00, 0x3c, 0x59,
	0xda, 0x97, 0xa4, 0x23, 0x42, 0x98, 0x3a, 0xd0, 0x97, 0x1b, 0xe0, 0x29, 0xc4, 0x5c, 0xd0, 0xce,
	0xe5, 0xc8, 0x47, 0x87, 0x00, 0x5d, 0x0f, 0x9b, 0x14, 0xf7, 0xda, 0x26, 0xe5, 0x61, 0x4e, 0x1d,
	0x14, 0xcb, 0xa2, 0x26, 0x96, 0xc3, 0x9a, 0x58, 0x3e, 0x0b, 0x8b, 0x66, 0x4d, 0xfd, 0xea, 0xa6,
	0xb4, 0xf3, 0xb7, 0x7f, 0x97, 0x14, 0x43, 0x93, 0x7a, 0x55, 0x8a, 0xaa, 0xa0, 0x7d, 0xc1, 0xb8,
	0xc9, 0x6d, 0xa8, 0x5b, 0xd8, 0x50, 0x85, 0x5a, 0x95, 0xb2, 0x73, 0xf0, 0x4a, 0x21, 0x6c, 0x68,
	0xdb, 0x9c, 0x43, 0xea, 0x55, 0x29, 0x6a, 0x40, 0xea, 0xdc, 0x72, 0x2c, 0xff, 0x42, 0x58, 0x81,
	0x2d, 0xac, 0x40, 0xa8, 0x58, 0xa5, 0xe8, 0x43, 0x50, 0xc3, 0x2e, 0xc2, 0x53, 0x3d, 0x75, 0xf0,
	0xda, 0x82, 0x8d, 0xba, 0x04, 0x08, 0x13, 0xff, 0xe0, 0xce, 0x84, 0x4a, 0xfa, 0x4d, 0x0c, 0xd4,
	0x30, 0xd8, 0xdf, 0x15, 0xef, 0x78, 0xd9, 0xe7, 0x55, 0x49, 0xd4, 0xd3, 0x58, 0x58, 0xf6, 0x99,
	0x4c, 0x14, 0xd3, 0x0a, 0xa4, 0x7c, 0x66, 0xcc, 0xe9, 0xe2, 0xb6, 0xd5, 0xe3, 0x04, 0x8c, 0xd5,
	0xb2, 0xa3, 0x9b, 0x12, 0x9c, 0x4a, 0x71, 0xb3, 0x6e, 0x40, 0x08, 0x69, 0xf6, 0xd0, 0xcf, 0x21,
	0xf1, 0x47, 0x5e, 0x50, 0x78, 0x25, 0x4f, 0x1d, 0xec, 0x2d, 0x3f, 0xb1, 0x28, 0x3c, 0x86, 0xc4,
	0x33, 0xa6, 0xf2, 0xe2, 0x28, 0x98, 0x9a, 0x5c, 0xc7, 0x54, 0x5e, 0x34, 0x39, 0x53, 0x7d, 0x39,
	0xf2, 0xbf, 0x6f, 0x24, 0x9b, 0x24, 0x7e, 0x6a, 0xeb, 0xc4, 0xd7, 0xff, 0x17, 0x07, 0x35, 0x8c,
	0xd1, 0x77, 0x45, 0xb0, 0x39, 0xf6, 0xc4, 0xd6, 0xb2, 0x67, 0xea, 0x4d, 0xc0, 0xa9, 0x60, 0x39,
	0x3d, 0x7c, 0x2d, 0xfb, 0x42, 0x7e, 0xaa, 0x59, 0x36, 0x99, 0x1c, 0xbd, 0x3d, 0x87, 0x1e, 0x58,
	0xec, 0x7d, 0xc3, 0x78, 0x17, 0x31, 0x72, 0x53, 0xe8, 0xdf, 0x5a, 0xce, 0xf3, 0x45, 0xb0, 0x79,
	0xdd, 0xbe, 0xe6, 0xd5, 0x6c, 0x0e, 0x6c, 0x5e, 0x3f, 0xbf, 0xd5, 0xf2, 0x90, 0x33, 0x6a, 0xc1,
	0xf2, 0x8b, 0x5b, 0x2d, 0x8b, 0xb7, 0xc3, 0x82, 0xe5, 0x17, 0x0b, 0x39, 0x07, 0x8b, 0x39, 0x37,
	0x49, 0xa1, 0xd4, 0xd6, 0x29, 0x34, 0xc5, 0xff, 0xf4, 0xb7, 0xc0, 0xff, 0xcc, 0xb7, 0xc2, 0xff,
	0xec, 0x37, 0xe6, 0x7f, 0x6e, 0x7b, 0xfe, 0xff, 0x53, 0x01, 0x4d, 0x84, 0x87, 0x25, 0x40, 0x15,
	0xb4, 0x71, 0x1b, 0x94, 0x8f, 0xf2, 0x0d, 0xba, 0xe0, 0xf1, 0x8e, 0xa1, 0x86, 0x7d, 0x90, 0x99,
	0x18, 0xd7, 0x27, 0x99, 0x2d, 0x1b, 0x94, 0x27, 0x66, 0xc2, 0x9f, 0x4d, 0xc3, 0xe8, 0x7c, 0x1a,
	0xd6, 0xe2, 0x10, 0xbd, 0x24, 0x1d, 0xfd, 0xeb, 0x08, 0x68, 0xe2, 0xed, 0x16, 0xd8, 0x74, 0xf6,
	0xad, 0xa7, 0xcc, 0xbd, 0xf5, 0x66, 0x1d, 0x8a, 0x7c, 0x73, 0x87, 0xa2, 0x2f, 0xe5, 0xd0, 0x74,
	0x1b, 0x8c, 0xbd, 0x44, 0x1b, 0x5c, 0x48, 0x87, 0xf8, 0x62, 0x3a, 0x4c, 0x58, 0x90, 0xd8, 0xfe,
	0xf9, 0xb3, 0x0b, 0x71, 0xec, 0x79, 0xc4, 0xe3, 0x89, 0xae, 0x19, 0x62, 0x52, 0x53, 0x21, 0xe1,
	0xf1, 0x20, 0xeb, 0x6d, 0xc8, 0x3d, 0xb1, 0x7c, 0xca, 0xba, 0x47, 0xf8, 0x0d, 0xf5, 0x16, 0x64,
	0xf1, 0x75, 0xd7, 0x0e, 0x7a, 0x58, 0x9c, 0xc9, 0xe7, 0xc1, 0x57, 0x8d, 0x8c, 0x94, 0xf2, 0x53,
	0xf9, 0xd3, 0x30, 0xf9, 0xa6, 0x8f, 0xcc, 0xc0, 0xc4, 0xa3, 0x5e, 0x6f, 0x40, 0x7e, 0xb2, 0x81,
	0x7c, 0x93, 0x3f, 0x84, 0x18, 0xef, 0x71, 0x0a, 0xef, 0x71, 0xaf, 0xaf, 0x2e, 0xb9, 0x1c, 0xaa,
	0xdf, 0x83, 0xcc, 0x11, 0xa6, 0x53, 0x5f, 0x7a, 0x4b, 0x2a, 0xba, 0x5e, 0x85, 0x6c, 0x08, 0x94,
	0xbb, 0x55, 0x38, 0xb9, 0x24, 0xe9, 0xd7, 0x6c, 0xc6, 0x69, 0xb8, 0x0b, 0x88, 0x1d, 0x59, 0x24,
	0x4f, 0x18, 0x16, 0xfd, 0x19, 0xfc, 0x70, 0x46, 0x2a, 0xad, 0xbf, 0x0f, 0x49, 0x51, 0x7c, 0x42,
	0x77, 0xd6, 0x57, 0xab, 0x50, 0x41, 0x7f, 0x00, 0xf9, 0x3a, 0xb6, 0x31, 0xc5, 0x1b, 0xf8, 0xf5,
	0xa5, 0x02, 0x77, 0x8e, 0x30, 0x7d, 0x62, 0x52, 0xd6, 0x80, 0xb8, 0xc9, 0x35, 0x2a, 0xec, 0xee,
	0x05, 0xa9, 0xc4, 0x17, 0xaf, 0x98, 0xa0, 0x5f, 0x42, 0x94, 0x52, 0x5b, 0xf2, 0x7d, 0x05, 0x5b,
	0x73, 0x8c, 0xad, 0xec, 0xe3, 0xee, 0xec, 0xec, 0x09, 0x27, 0x2d, 0x53, 0xd3, 0xab, 0xf0, 0xea,
	0xc2, 0x29, 0x64, 0x24, 0xf2, 0x10, 0x0d, 0x3c, 0x5b, 0x66, 0x2a, 0x1b, 0xde, 0x7e, 0x00, 0xfd,
	0x2f, 0x0a, 0xec, 0x1e, 0x12, 0x87, 0x7a, 0xc4, 0x96, 0x01, 0x91, 0x7e, 0xdc, 0x07, 0x4d, 0x44,
	0xa6, 0x3d, 0x76, 0x27, 0x3d, 0xba, 0x29, 0xa9, 0x02, 0xd5, 0xac, 0x1b, 0xaa, 0x58, 0x6e, 0xf6,
	0xd0, 0xfb, 0x10, 0xf3, 0x29, 0x71, 0xd7, 0x37, 0x6d, 0xa1, 0x7b, 0x4a, 0x89, 0x7b, 0xbc, 0x63,
	0x70, 0x9d, 0x9a, 0x06, 0xc9, 0x01, 0xf6, 0x7d, 0xb3, 0x8f, 0xf5, 0x34, 0xc0, 0x04, 0xa0, 0xbf,
	0x0a, 0xaf, 0xcc, 0x9d, 0x4b, 0x78, 0xa6, 0xe7, 0x21, 0xfb, 0xa9, 0xf8, 0xee, 0x0b, 0xc9, 0xf0,
	0x77, 0x05, 0x72, 0x63, 0x91, 0xf4, 0x7f, 0xbb, 0x0f, 0xc8, 0x5d, 0x88, 0x77, 0x02, 0xcb, 0x96,
	0xd5, 0xd0, 0x10, 0x13, 0xf6, 0x81, 0xd6, 0x25, 0x83, 0x81, 0x45, 0xe5, 0x57, 0x90, 0x9c, 0xa1,
	0x37, 0x21, 0x63, 0x06, 0xf4, 0x02, 0x3b, 0xd4, 0xea, 0x9a, 0x94, 0x78, 0xbc, 0x4e, 0x68, 0xc6,
	0xac, 0x50, 0xff, 0x14, 0xf2, 0xe2, 0x4e, 0x9e, 0x90, 0xfe, 0xcb, 0x91, 0x63, 0x17, 0xe2, 0x3c,
	0x99, 0xe5, 0x2f, 0x20, 0x62, 0xa2, 0x37, 0x41, 0x1b, 0xdb, 0x65, 0xd7, 0x6c, 0x93, 0x7e, 0x78,
	0xcd, 0x36, 0xe9, 0x6f, 0x65, 0xea, 0x33, 0xf8, 0xc1, 0xd4, 0x11, 0x65, 0xe4, 0x6a, 0x00, 0xb2,
	0x08, 0x86, 0x96, 0x53, 0xab, 0xaa, 0xdc, 0xc4, 0x80, 0xe6, 0x85, 0x43, 0x56, 0x20, 0x1e, 0x93,
	0xce, 0x7a, 0xc7, 0xf5, 0x13, 0x48, 0x08, 0xe0, 0xd2, 0xd0, 0xcc, 0x34, 0x9e, 0xc8, 0x7c, 0xe3,
	0x91, 0xfe, 0x47, 0xc7, 0xfe, 0xeb, 0x1f, 0x43, 0x36, 0xdc, 0x5a, 0x3a, 0xf4, 0x0b, 0x48, 0xb2,
	0x67, 0xe1, 0xc4, 0x9b, 0xbd, 0x95, 0x65, 0x87, 0xa9, 0x26, 0x2e, 0xf9, 0x5f, 0xbd, 0x0c, 0xbb,
	0xa2, 0x7e, 0x55, 0xbd, 0xee, 0x85, 0x75, 0x85, 0xd7, 0xb9, 0xf3, 0x2e, 0xff, 0xfd, 0x4b, 0x82,
	0x51, 0x09, 0x52, 0xa6, 0x18, 0xb6, 0x27, 0xb9, 0x08, 0x52, 0xd4, 0xf2, 0x6c, 0xfd, 0x0a, 0x5e,
	0x99, 0x33, 0x2f, 0x8f, 0xbc, 0x2c, 0x18, 0x0d, 0x48, 0x31, 0x57, 0xa4, 0x89, 0x8d, 0x5e, 0xc9,
	0xa1, 0x69, 0xf6, 0x34, 0x96, 0xe3, 0x07, 0x1f, 0xf2, 0xce, 0x2e, 0x9a, 0x13, 0x02, 0x48, 0x3c,
	0x6b, 0x35, 0x5a, 0x8d, 0x7a, 0x7e, 0x07, 0x65, 0x40, 0x33, 0x1a, 0x4f, 0xeb, 0x0d, 0xa3, 0xf9,
	0xf4, 0x28, 0xaf, 0x20, 0x0d, 0xe2, 0x0d, 0xc3, 0xf8, 0xc4, 0xc8, 0x47, 0x50, 0x1a, 0xd4, 0x8f,
	0x9a, 0x4f, 0x9b, 0xa7, 0xc7, 0x8d, 0x7a, 0x3e, 0x7a, 0xf0, 0x5f, 0x15, 0x12, 0xe2, 0xe2, 0x51,
	0x17, 0xd4, 0xf0, 0x67, 0x1e, 0x74, 0x7f, 0xf9, 0x49, 0xe6, 0x7e, 0x95, 0x2c, 0x3e, 0xd8, 0x04,
	0x2a, 0xa2, 0xb1, 0xaf, 0x20, 0x13, 0xd4, 0xb0, 0x6f, 0xad, 0xda, 0x64, 0xae, 0x79, 0xae, 0xda,
	0x64, 0xa1, 0x0d, 0xfe, 0x1e, 0x12, 0xe2, 0x2e, 0xd0, 0xbd, 0xe5, 0x5a, 0x33, 0x5d, 0xaf, 0xb8,
	0xbf, 0x1e, 0x28, 0x8d, 0x5f, 0x42, 0x6a, 0xaa, 0x5d, 0xa1, 0x77, 0x56, 0x9f, 0x6b, 0xb6, 0xd7,
	0x15, 0xdf, 0xdd, 0x10, 0x2d, 0xf7, 0xfa, 0x04, 0xb4, 0x71, 0x1f, 0x43, 0x2b, 0x22, 0x30, 0xdf,
	0xec, 0x8a, 0x77, 0x16, 0xda, 0x4f, 0x63, 0xe0, 0xd2, 0x21, 0xba, 0x82, 0xdc, 0x5c, 0x97, 0x41,
	0xef, 0xad, 0xf4, 0xfc, 0x96, 0xb6, 0x58, 0x7c, 0xb8, 0x85, 0x86, 0x74, 0xc4, 0x85, 0xcc, 0x4c,
	0x07, 0x40, 0xe5, 0xe5, 0x36, 0x6e, 0x6b, 0x61, 0xc5, 0xca, 0xc6, 0x78, 0xb9, 0xe3, 0x1f, 0x20,
	0x29, 0xfb, 0x08, 0x5a, 0x71, 0xb7, 0xb3, 0xdd, 0xa7, 0x78, 0x7f, 0x03, 0xe4, 0x84, 0x63, 0xb2,
	0xda, 0xdd, 0x5b, 0x5b, 0x82, 0xd6, 0x73, 0x6c, 0xae, 0xcc, 0xf5, 0xa6, 0xfb, 0xc2, 0x83, 0x4d,
	0x0a, 0xb6, 0xdc, 0xe2, 0xed, 0x8d, 0xb0, 0x93, 0x4b, 0x99, 0x29, 0x59, 0xab, 0x2e, 0xe5, 0xb6,
	0xd2, 0xb9, 0xea, 0x52, 0x6e, 0xad, 0x85, 0xb5, 0x8f, 0xbf, 0x1a, 0xdd, 0x55, 0xfe, 0x35, 0xba,
	0xab, 0xfc, 0x67, 0x74, 0x57, 0xf9, 0xdd, 0xaf, 0x5e, 0xee, 0x7f, 0x36, 0x1f, 0x88, 0xd1, 0xf3,
	0x68, 0x27, 0xc1, 0xd9, 0xfd, 0xd3, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x25, 0x0b, 0xd4,
	0xfd, 0x19, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RenderClient is the client API for Render service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RenderClient interface {
	QueueJob(ctx context.Context, opts ...grpc.CallOption) (Render_QueueJobClient, error)
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error)
	ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*ListWorkersResponse, error)
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*types.Empty, error)
	GetLatestRender(ctx context.Context, in *GetLatestRenderRequest, opts ...grpc.CallOption) (*GetLatestRenderResponse, error)
	ControlWorker(ctx context.Context, in *ControlWorkerRequest, opts ...grpc.CallOption) (*ControlWorkerResponse, error)
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	JobLog(ctx context.Context, in *JobLogRequest, opts ...grpc.CallOption) (*JobLogResponse, error)
	RenderLog(ctx context.Context, in *RenderLogRequest, opts ...grpc.CallOption) (*RenderLogResponse, error)
	GetJobArchive(ctx context.Context, in *GetJobArchiveRequest, opts ...grpc.CallOption) (*GetJobArchiveResponse, error)
}

type renderClient struct {
	cc *grpc.ClientConn
}

func NewRenderClient(cc *grpc.ClientConn) RenderClient {
	return &renderClient{cc}
}

func (c *renderClient) QueueJob(ctx context.Context, opts ...grpc.CallOption) (Render_QueueJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Render_serviceDesc.Streams[0], "/fynca.services.render.v1.Render/QueueJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &renderQueueJobClient{stream}
	return x, nil
}

type Render_QueueJobClient interface {
	Send(*QueueJobRequest) error
	CloseAndRecv() (*QueueJobResponse, error)
	grpc.ClientStream
}

type renderQueueJobClient struct {
	grpc.ClientStream
}

func (x *renderQueueJobClient) Send(m *QueueJobRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *renderQueueJobClient) CloseAndRecv() (*QueueJobResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(QueueJobResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *renderClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, "/fynca.services.render.v1.Render/ListJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renderClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error) {
	out := new(GetJobResponse)
	err := c.cc.Invoke(ctx, "/fynca.services.render.v1.Render/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renderClient) ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*ListWorkersResponse, error) {
	out := new(ListWorkersResponse)
	err := c.cc.Invoke(ctx, "/fynca.services.render.v1.Render/ListWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renderClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/fynca.services.render.v1.Render/DeleteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renderClient) GetLatestRender(ctx context.Context, in *GetLatestRenderRequest, opts ...grpc.CallOption) (*GetLatestRenderResponse, error) {
	out := new(GetLatestRenderResponse)
	err := c.cc.Invoke(ctx, "/fynca.services.render.v1.Render/GetLatestRender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renderClient) ControlWorker(ctx context.Context, in *ControlWorkerRequest, opts ...grpc.CallOption) (*ControlWorkerResponse, error) {
	out := new(ControlWorkerResponse)
	err := c.cc.Invoke(ctx, "/fynca.services.render.v1.Render/ControlWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renderClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/fynca.services.render.v1.Render/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renderClient) JobLog(ctx context.Context, in *JobLogRequest, opts ...grpc.CallOption) (*JobLogResponse, error) {
	out := new(JobLogResponse)
	err := c.cc.Invoke(ctx, "/fynca.services.render.v1.Render/JobLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renderClient) RenderLog(ctx context.Context, in *RenderLogRequest, opts ...grpc.CallOption) (*RenderLogResponse, error) {
	out := new(RenderLogResponse)
	err := c.cc.Invoke(ctx, "/fynca.services.render.v1.Render/RenderLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renderClient) GetJobArchive(ctx context.Context, in *GetJobArchiveRequest, opts ...grpc.CallOption) (*GetJobArchiveResponse, error) {
	out := new(GetJobArchiveResponse)
	err := c.cc.Invoke(ctx, "/fynca.services.render.v1.Render/GetJobArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RenderServer is the server API for Render service.
type RenderServer interface {
	QueueJob(Render_QueueJobServer) error
	ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error)
	GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error)
	ListWorkers(context.Context, *ListWorkersRequest) (*ListWorkersResponse, error)
	DeleteJob(context.Context, *DeleteJobRequest) (*types.Empty, error)
	GetLatestRender(context.Context, *GetLatestRenderRequest) (*GetLatestRenderResponse, error)
	ControlWorker(context.Context, *ControlWorkerRequest) (*ControlWorkerResponse, error)
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	JobLog(context.Context, *JobLogRequest) (*JobLogResponse, error)
	RenderLog(context.Context, *RenderLogRequest) (*RenderLogResponse, error)
	GetJobArchive(context.Context, *GetJobArchiveRequest) (*GetJobArchiveResponse, error)
}

// UnimplementedRenderServer can be embedded to have forward compatible implementations.
type UnimplementedRenderServer struct {
}

func (*UnimplementedRenderServer) QueueJob(srv Render_QueueJobServer) error {
	return status.Errorf(codes.Unimplemented, "method QueueJob not implemented")
}
func (*UnimplementedRenderServer) ListJobs(ctx context.Context, req *ListJobsRequest) (*ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (*UnimplementedRenderServer) GetJob(ctx context.Context, req *GetJobRequest) (*GetJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedRenderServer) ListWorkers(ctx context.Context, req *ListWorkersRequest) (*ListWorkersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkers not implemented")
}
func (*UnimplementedRenderServer) DeleteJob(ctx context.Context, req *DeleteJobRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (*UnimplementedRenderServer) GetLatestRender(ctx context.Context, req *GetLatestRenderRequest) (*GetLatestRenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestRender not implemented")
}
func (*UnimplementedRenderServer) ControlWorker(ctx context.Context, req *ControlWorkerRequest) (*ControlWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlWorker not implemented")
}
func (*UnimplementedRenderServer) Version(ctx context.Context, req *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedRenderServer) JobLog(ctx context.Context, req *JobLogRequest) (*JobLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobLog not implemented")
}
func (*UnimplementedRenderServer) RenderLog(ctx context.Context, req *RenderLogRequest) (*RenderLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderLog not implemented")
}
func (*UnimplementedRenderServer) GetJobArchive(ctx context.Context, req *GetJobArchiveRequest) (*GetJobArchiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobArchive not implemented")
}

func RegisterRenderServer(s *grpc.Server, srv RenderServer) {
	s.RegisterService(&_Render_serviceDesc, srv)
}

func _Render_QueueJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RenderServer).QueueJob(&renderQueueJobServer{stream})
}

type Render_QueueJobServer interface {
	SendAndClose(*QueueJobResponse) error
	Recv() (*QueueJobRequest, error)
	grpc.ServerStream
}

type renderQueueJobServer struct {
	grpc.ServerStream
}

func (x *renderQueueJobServer) SendAndClose(m *QueueJobResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *renderQueueJobServer) Recv() (*QueueJobRequest, error) {
	m := new(QueueJobRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Render_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenderServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fynca.services.render.v1.Render/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenderServer).ListJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Render_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenderServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fynca.services.render.v1.Render/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenderServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Render_ListWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenderServer).ListWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fynca.services.render.v1.Render/ListWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenderServer).ListWorkers(ctx, req.(*ListWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Render_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenderServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fynca.services.render.v1.Render/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenderServer).DeleteJob(ctx, req.(*DeleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Render_GetLatestRender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestRenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenderServer).GetLatestRender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fynca.services.render.v1.Render/GetLatestRender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenderServer).GetLatestRender(ctx, req.(*GetLatestRenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Render_ControlWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenderServer).ControlWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fynca.services.render.v1.Render/ControlWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenderServer).ControlWorker(ctx, req.(*ControlWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Render_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenderServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fynca.services.render.v1.Render/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenderServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Render_JobLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenderServer).JobLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fynca.services.render.v1.Render/JobLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenderServer).JobLog(ctx, req.(*JobLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Render_RenderLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenderServer).RenderLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fynca.services.render.v1.Render/RenderLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenderServer).RenderLog(ctx, req.(*RenderLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Render_GetJobArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenderServer).GetJobArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fynca.services.render.v1.Render/GetJobArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenderServer).GetJobArchive(ctx, req.(*GetJobArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Render_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fynca.services.render.v1.Render",
	HandlerType: (*RenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListJobs",
			Handler:    _Render_ListJobs_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _Render_GetJob_Handler,
		},
		{
			MethodName: "ListWorkers",
			Handler:    _Render_ListWorkers_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _Render_DeleteJob_Handler,
		},
		{
			MethodName: "GetLatestRender",
			Handler:    _Render_GetLatestRender_Handler,
		},
		{
			MethodName: "ControlWorker",
			Handler:    _Render_ControlWorker_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Render_Version_Handler,
		},
		{
			MethodName: "JobLog",
			Handler:    _Render_JobLog_Handler,
		},
		{
			MethodName: "RenderLog",
			Handler:    _Render_RenderLog_Handler,
		},
		{
			MethodName: "GetJobArchive",
			Handler:    _Render_GetJobArchive_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueueJob",
			Handler:       _Render_QueueJob_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "git.underland.io/ehazlett/fynca/api/services/render/v1/render.proto",
}

func (m *QueueJobRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueJobRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueJobRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueueJobRequest_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueJobRequest_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *QueueJobRequest_ChunkData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueJobRequest_ChunkData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChunkData != nil {
		i -= len(m.ChunkData)
		copy(dAtA[i:], m.ChunkData)
		i = encodeVarintRender(dAtA, i, uint64(len(m.ChunkData)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *JobRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRender(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintRender(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x6a
	}
	if m.RenderSlices != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.RenderSlices))
		i--
		dAtA[i] = 0x60
	}
	if m.Memory != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.Memory))
		i--
		dAtA[i] = 0x58
	}
	if m.CPU != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.CPU))
		i--
		dAtA[i] = 0x50
	}
	if m.RenderPriority != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.RenderPriority))
		i--
		dAtA[i] = 0x48
	}
	if m.RenderUseGPU {
		i--
		if m.RenderUseGPU {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.RenderEndFrame != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.RenderEndFrame))
		i--
		dAtA[i] = 0x38
	}
	if m.RenderStartFrame != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.RenderStartFrame))
		i--
		dAtA[i] = 0x30
	}
	if m.RenderSamples != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.RenderSamples))
		i--
		dAtA[i] = 0x28
	}
	if m.ResolutionScale != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.ResolutionScale))
		i--
		dAtA[i] = 0x20
	}
	if m.ResolutionY != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.ResolutionY))
		i--
		dAtA[i] = 0x18
	}
	if m.ResolutionX != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.ResolutionX))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRender(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueueJobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueJobResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueJobResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintRender(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Worker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Worker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Worker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Load15 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Load15))))
		i--
		dAtA[i] = 0x49
	}
	if m.Load5 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Load5))))
		i--
		dAtA[i] = 0x41
	}
	if m.Load1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Load1))))
		i--
		dAtA[i] = 0x39
	}
	if len(m.GPUs) > 0 {
		for iNdEx := len(m.GPUs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GPUs[iNdEx])
			copy(dAtA[i:], m.GPUs[iNdEx])
			i = encodeVarintRender(dAtA, i, uint64(len(m.GPUs[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.MemoryAvailable != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.MemoryAvailable))
		i--
		dAtA[i] = 0x28
	}
	if m.MemoryTotal != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.MemoryTotal))
		i--
		dAtA[i] = 0x20
	}
	if m.CPUs != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.CPUs))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintRender(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRender(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Job) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Job) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Job) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintRender(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x5a
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.FinishedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.FinishedAt):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintRender(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x52
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintRender(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x4a
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.QueuedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.QueuedAt):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintRender(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x42
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintRender(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x3a
	if len(m.FrameJobs) > 0 {
		for iNdEx := len(m.FrameJobs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FrameJobs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Status != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OutputDir) > 0 {
		i -= len(m.OutputDir)
		copy(dAtA[i:], m.OutputDir)
		i = encodeVarintRender(dAtA, i, uint64(len(m.OutputDir)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.JobSource) > 0 {
		i -= len(m.JobSource)
		copy(dAtA[i:], m.JobSource)
		i = encodeVarintRender(dAtA, i, uint64(len(m.JobSource)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRender(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FrameJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrameJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x58
	}
	n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.FinishedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.FinishedAt):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintRender(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x52
	n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintRender(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x4a
	n10, err10 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.QueuedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.QueuedAt):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintRender(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0x42
	if len(m.SliceJobs) > 0 {
		for iNdEx := len(m.SliceJobs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SliceJobs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Worker != nil {
		{
			size, err := m.Worker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.SequenceID != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.SequenceID))
		i--
		dAtA[i] = 0x28
	}
	if m.RenderFrame != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.RenderFrame))
		i--
		dAtA[i] = 0x20
	}
	if len(m.JobSource) > 0 {
		i -= len(m.JobSource)
		copy(dAtA[i:], m.JobSource)
		i = encodeVarintRender(dAtA, i, uint64(len(m.JobSource)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRender(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SliceJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SliceJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SliceJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x78
	}
	n13, err13 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.FinishedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.FinishedAt):])
	if err13 != nil {
		return 0, err13
	}
	i -= n13
	i = encodeVarintRender(dAtA, i, uint64(n13))
	i--
	dAtA[i] = 0x72
	n14, err14 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt):])
	if err14 != nil {
		return 0, err14
	}
	i -= n14
	i = encodeVarintRender(dAtA, i, uint64(n14))
	i--
	dAtA[i] = 0x6a
	n15, err15 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.QueuedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.QueuedAt):])
	if err15 != nil {
		return 0, err15
	}
	i -= n15
	i = encodeVarintRender(dAtA, i, uint64(n15))
	i--
	dAtA[i] = 0x62
	if m.Worker != nil {
		{
			size, err := m.Worker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.RenderFrame != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.RenderFrame))
		i--
		dAtA[i] = 0x50
	}
	if m.RenderSliceMaxY != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RenderSliceMaxY))))
		i--
		dAtA[i] = 0x4d
	}
	if m.RenderSliceMinY != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RenderSliceMinY))))
		i--
		dAtA[i] = 0x45
	}
	if m.RenderSliceMaxX != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RenderSliceMaxX))))
		i--
		dAtA[i] = 0x3d
	}
	if m.RenderSliceMinX != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RenderSliceMinX))))
		i--
		dAtA[i] = 0x35
	}
	if m.RenderSliceIndex != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.RenderSliceIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.SequenceID != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.SequenceID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.JobSource) > 0 {
		i -= len(m.JobSource)
		copy(dAtA[i:], m.JobSource)
		i = encodeVarintRender(dAtA, i, uint64(len(m.JobSource)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRender(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkerJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRender(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Job != nil {
		{
			size := m.Job.Size()
			i -= size
			if _, err := m.Job.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorkerJob_FrameJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerJob_FrameJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FrameJob != nil {
		{
			size, err := m.FrameJob.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *WorkerJob_SliceJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerJob_SliceJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SliceJob != nil {
		{
			size, err := m.SliceJob.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *JobResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintRender(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Status != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.RenderFrame != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.RenderFrame))
		i--
		dAtA[i] = 0x28
	}
	n20, err20 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration):])
	if err20 != nil {
		return 0, err20
	}
	i -= n20
	i = encodeVarintRender(dAtA, i, uint64(n20))
	i--
	dAtA[i] = 0x22
	if m.Result != nil {
		{
			size := m.Result.Size()
			i -= size
			if _, err := m.Result.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRender(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobResult_FrameJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobResult_FrameJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FrameJob != nil {
		{
			size, err := m.FrameJob.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *JobResult_SliceJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobResult_SliceJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SliceJob != nil {
		{
			size, err := m.SliceJob.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ListJobsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListJobsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListJobsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExcludeSlices {
		i--
		if m.ExcludeSlices {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ExcludeFrames {
		i--
		if m.ExcludeFrames {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListJobsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListJobsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListJobsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Jobs) > 0 {
		for iNdEx := len(m.Jobs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Jobs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetJobRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJobRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJobRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRender(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetJobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJobResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJobResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Job != nil {
		{
			size, err := m.Job.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListWorkersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWorkersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWorkersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ListWorkersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWorkersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWorkersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Workers) > 0 {
		for iNdEx := len(m.Workers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Workers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteJobRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteJobRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteJobRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRender(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLatestRenderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestRenderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLatestRenderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n24, err24 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.TTL, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.TTL):])
	if err24 != nil {
		return 0, err24
	}
	i -= n24
	i = encodeVarintRender(dAtA, i, uint64(n24))
	i--
	dAtA[i] = 0x1a
	if m.Frame != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.Frame))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRender(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLatestRenderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestRenderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLatestRenderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Frame != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.Frame))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintRender(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ControlWorkerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlWorkerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControlWorkerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.WorkerID) > 0 {
		i -= len(m.WorkerID)
		copy(dAtA[i:], m.WorkerID)
		i = encodeVarintRender(dAtA, i, uint64(len(m.WorkerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ControlWorkerRequest_Stop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControlWorkerRequest_Stop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Stop != nil {
		{
			size, err := m.Stop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WorkerStop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerStop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerStop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ControlWorkerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlWorkerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControlWorkerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *VersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *VersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Authenticator) > 0 {
		i -= len(m.Authenticator)
		copy(dAtA[i:], m.Authenticator)
		i = encodeVarintRender(dAtA, i, uint64(len(m.Authenticator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Commit) > 0 {
		i -= len(m.Commit)
		copy(dAtA[i:], m.Commit)
		i = encodeVarintRender(dAtA, i, uint64(len(m.Commit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Build) > 0 {
		i -= len(m.Build)
		copy(dAtA[i:], m.Build)
		i = encodeVarintRender(dAtA, i, uint64(len(m.Build)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintRender(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRender(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RenderLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenderLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Slice != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.Slice))
		i--
		dAtA[i] = 0x18
	}
	if m.Frame != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.Frame))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRender(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RenderLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenderLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Slice != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.Slice))
		i--
		dAtA[i] = 0x18
	}
	if m.Frame != 0 {
		i = encodeVarintRender(dAtA, i, uint64(m.Frame))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Log) > 0 {
		i -= len(m.Log)
		copy(dAtA[i:], m.Log)
		i = encodeVarintRender(dAtA, i, uint64(len(m.Log)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RenderLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenderLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenderLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RenderLog != nil {
		{
			size, err := m.RenderLog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRender(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Log) > 0 {
		i -= len(m.Log)
		copy(dAtA[i:], m.Log)
		i = encodeVarintRender(dAtA, i, uint64(len(m.Log)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRender(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRender(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.JobLog != nil {
		{
			size, err := m.JobLog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetJobArchiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJobArchiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJobArchiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRender(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobArchive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobArchive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobArchive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ArchiveUrl) > 0 {
		i -= len(m.ArchiveUrl)
		copy(dAtA[i:], m.ArchiveUrl)
		i = encodeVarintRender(dAtA, i, uint64(len(m.ArchiveUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetJobArchiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJobArchiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJobArchiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.JobArchive != nil {
		{
			size, err := m.JobArchive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRender(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRender(dAtA []byte, offset int, v uint64) int {
	offset -= sovRender(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueueJobRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueueJobRequest_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovRender(uint64(l))
	}
	return n
}
func (m *QueueJobRequest_ChunkData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChunkData != nil {
		l = len(m.ChunkData)
		n += 1 + l + sovRender(uint64(l))
	}
	return n
}
func (m *JobRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.ResolutionX != 0 {
		n += 1 + sovRender(uint64(m.ResolutionX))
	}
	if m.ResolutionY != 0 {
		n += 1 + sovRender(uint64(m.ResolutionY))
	}
	if m.ResolutionScale != 0 {
		n += 1 + sovRender(uint64(m.ResolutionScale))
	}
	if m.RenderSamples != 0 {
		n += 1 + sovRender(uint64(m.RenderSamples))
	}
	if m.RenderStartFrame != 0 {
		n += 1 + sovRender(uint64(m.RenderStartFrame))
	}
	if m.RenderEndFrame != 0 {
		n += 1 + sovRender(uint64(m.RenderEndFrame))
	}
	if m.RenderUseGPU {
		n += 2
	}
	if m.RenderPriority != 0 {
		n += 1 + sovRender(uint64(m.RenderPriority))
	}
	if m.CPU != 0 {
		n += 1 + sovRender(uint64(m.CPU))
	}
	if m.Memory != 0 {
		n += 1 + sovRender(uint64(m.Memory))
	}
	if m.RenderSlices != 0 {
		n += 1 + sovRender(uint64(m.RenderSlices))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueueJobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Worker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.CPUs != 0 {
		n += 1 + sovRender(uint64(m.CPUs))
	}
	if m.MemoryTotal != 0 {
		n += 1 + sovRender(uint64(m.MemoryTotal))
	}
	if m.MemoryAvailable != 0 {
		n += 1 + sovRender(uint64(m.MemoryAvailable))
	}
	if len(m.GPUs) > 0 {
		for _, s := range m.GPUs {
			l = len(s)
			n += 1 + l + sovRender(uint64(l))
		}
	}
	if m.Load1 != 0 {
		n += 9
	}
	if m.Load5 != 0 {
		n += 9
	}
	if m.Load15 != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Job) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovRender(uint64(l))
	}
	l = len(m.JobSource)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	l = len(m.OutputDir)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovRender(uint64(m.Status))
	}
	if len(m.FrameJobs) > 0 {
		for _, e := range m.FrameJobs {
			l = e.Size()
			n += 1 + l + sovRender(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovRender(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.QueuedAt)
	n += 1 + l + sovRender(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt)
	n += 1 + l + sovRender(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.FinishedAt)
	n += 1 + l + sovRender(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovRender(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FrameJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovRender(uint64(l))
	}
	l = len(m.JobSource)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.RenderFrame != 0 {
		n += 1 + sovRender(uint64(m.RenderFrame))
	}
	if m.SequenceID != 0 {
		n += 1 + sovRender(uint64(m.SequenceID))
	}
	if m.Worker != nil {
		l = m.Worker.Size()
		n += 1 + l + sovRender(uint64(l))
	}
	if len(m.SliceJobs) > 0 {
		for _, e := range m.SliceJobs {
			l = e.Size()
			n += 1 + l + sovRender(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.QueuedAt)
	n += 1 + l + sovRender(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt)
	n += 1 + l + sovRender(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.FinishedAt)
	n += 1 + l + sovRender(uint64(l))
	if m.Status != 0 {
		n += 1 + sovRender(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SliceJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovRender(uint64(l))
	}
	l = len(m.JobSource)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.SequenceID != 0 {
		n += 1 + sovRender(uint64(m.SequenceID))
	}
	if m.RenderSliceIndex != 0 {
		n += 1 + sovRender(uint64(m.RenderSliceIndex))
	}
	if m.RenderSliceMinX != 0 {
		n += 5
	}
	if m.RenderSliceMaxX != 0 {
		n += 5
	}
	if m.RenderSliceMinY != 0 {
		n += 5
	}
	if m.RenderSliceMaxY != 0 {
		n += 5
	}
	if m.RenderFrame != 0 {
		n += 1 + sovRender(uint64(m.RenderFrame))
	}
	if m.Worker != nil {
		l = m.Worker.Size()
		n += 1 + l + sovRender(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.QueuedAt)
	n += 1 + l + sovRender(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt)
	n += 1 + l + sovRender(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.FinishedAt)
	n += 1 + l + sovRender(uint64(l))
	if m.Status != 0 {
		n += 1 + sovRender(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkerJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Job != nil {
		n += m.Job.Size()
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkerJob_FrameJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FrameJob != nil {
		l = m.FrameJob.Size()
		n += 1 + l + sovRender(uint64(l))
	}
	return n
}
func (m *WorkerJob_SliceJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SliceJob != nil {
		l = m.SliceJob.Size()
		n += 1 + l + sovRender(uint64(l))
	}
	return n
}
func (m *JobResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.Result != nil {
		n += m.Result.Size()
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovRender(uint64(l))
	if m.RenderFrame != 0 {
		n += 1 + sovRender(uint64(m.RenderFrame))
	}
	if m.Status != 0 {
		n += 1 + sovRender(uint64(m.Status))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JobResult_FrameJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FrameJob != nil {
		l = m.FrameJob.Size()
		n += 1 + l + sovRender(uint64(l))
	}
	return n
}
func (m *JobResult_SliceJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SliceJob != nil {
		l = m.SliceJob.Size()
		n += 1 + l + sovRender(uint64(l))
	}
	return n
}
func (m *ListJobsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExcludeFrames {
		n += 2
	}
	if m.ExcludeSlices {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListJobsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Jobs) > 0 {
		for _, e := range m.Jobs {
			l = e.Size()
			n += 1 + l + sovRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetJobRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetJobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Job != nil {
		l = m.Job.Size()
		n += 1 + l + sovRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListWorkersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListWorkersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Workers) > 0 {
		for _, e := range m.Workers {
			l = e.Size()
			n += 1 + l + sovRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteJobRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLatestRenderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.Frame != 0 {
		n += 1 + sovRender(uint64(m.Frame))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.TTL)
	n += 1 + l + sovRender(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLatestRenderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.Frame != 0 {
		n += 1 + sovRender(uint64(m.Frame))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ControlWorkerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkerID)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.Message != nil {
		n += m.Message.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ControlWorkerRequest_Stop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stop != nil {
		l = m.Stop.Size()
		n += 1 + l + sovRender(uint64(l))
	}
	return n
}
func (m *WorkerStop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ControlWorkerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	l = len(m.Build)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	l = len(m.Commit)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	l = len(m.Authenticator)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RenderLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.Frame != 0 {
		n += 1 + sovRender(uint64(m.Frame))
	}
	if m.Slice != 0 {
		n += 1 + sovRender(uint64(m.Slice))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RenderLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Log)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.Frame != 0 {
		n += 1 + sovRender(uint64(m.Frame))
	}
	if m.Slice != 0 {
		n += 1 + sovRender(uint64(m.Slice))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RenderLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RenderLog != nil {
		l = m.RenderLog.Size()
		n += 1 + l + sovRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JobLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JobLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	l = len(m.Log)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JobLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JobLog != nil {
		l = m.JobLog.Size()
		n += 1 + l + sovRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetJobArchiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JobArchive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ArchiveUrl)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetJobArchiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRender(uint64(l))
	}
	if m.JobArchive != nil {
		l = m.JobArchive.Size()
		n += 1 + l + sovRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRender(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRender(x uint64) (n int) {
	return sovRender(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueueJobRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueJobRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueJobRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &QueueJobRequest_Request{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Data = &QueueJobRequest_ChunkData{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolutionX", wireType)
			}
			m.ResolutionX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolutionX |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolutionY", wireType)
			}
			m.ResolutionY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolutionY |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolutionScale", wireType)
			}
			m.ResolutionScale = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolutionScale |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderSamples", wireType)
			}
			m.RenderSamples = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RenderSamples |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderStartFrame", wireType)
			}
			m.RenderStartFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RenderStartFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderEndFrame", wireType)
			}
			m.RenderEndFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RenderEndFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderUseGPU", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RenderUseGPU = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderPriority", wireType)
			}
			m.RenderPriority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RenderPriority |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPU", wireType)
			}
			m.CPU = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CPU |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderSlices", wireType)
			}
			m.RenderSlices = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RenderSlices |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueJobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueJobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueJobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Worker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Worker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Worker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPUs", wireType)
			}
			m.CPUs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CPUs |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryTotal", wireType)
			}
			m.MemoryTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryTotal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryAvailable", wireType)
			}
			m.MemoryAvailable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryAvailable |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GPUs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GPUs = append(m.GPUs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Load1 = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load5", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Load5 = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load15", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Load15 = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Job) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Job: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Job: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &JobRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= JobStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameJobs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameJobs = append(m.FrameJobs, &FrameJob{})
			if err := m.FrameJobs[len(m.FrameJobs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.QueuedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.FinishedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrameJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &JobRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderFrame", wireType)
			}
			m.RenderFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RenderFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceID", wireType)
			}
			m.SequenceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Worker == nil {
				m.Worker = &Worker{}
			}
			if err := m.Worker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceJobs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliceJobs = append(m.SliceJobs, &SliceJob{})
			if err := m.SliceJobs[len(m.SliceJobs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.QueuedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.FinishedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= JobStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SliceJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SliceJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SliceJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &JobRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceID", wireType)
			}
			m.SequenceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderSliceIndex", wireType)
			}
			m.RenderSliceIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RenderSliceIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderSliceMinX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RenderSliceMinX = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderSliceMaxX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RenderSliceMaxX = float32(math.Float32frombits(v))
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderSliceMinY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RenderSliceMinY = float32(math.Float32frombits(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderSliceMaxY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RenderSliceMaxY = float32(math.Float32frombits(v))
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderFrame", wireType)
			}
			m.RenderFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RenderFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Worker == nil {
				m.Worker = &Worker{}
			}
			if err := m.Worker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.QueuedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.FinishedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= JobStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameJob", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FrameJob{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Job = &WorkerJob_FrameJob{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceJob", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SliceJob{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Job = &WorkerJob_SliceJob{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameJob", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FrameJob{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &JobResult_FrameJob{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceJob", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SliceJob{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &JobResult_SliceJob{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderFrame", wireType)
			}
			m.RenderFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RenderFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= JobStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListJobsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListJobsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListJobsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeFrames", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludeFrames = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeSlices", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludeSlices = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListJobsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListJobsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListJobsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jobs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jobs = append(m.Jobs, &Job{})
			if err := m.Jobs[len(m.Jobs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJobRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJobRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJobRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Job == nil {
				m.Job = &Job{}
			}
			if err := m.Job.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWorkersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWorkersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWorkersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWorkersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWorkersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWorkersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workers = append(m.Workers, &Worker{})
			if err := m.Workers[len(m.Workers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteJobRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteJobRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteJobRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestRenderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestRenderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestRenderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frame", wireType)
			}
			m.Frame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.TTL, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestRenderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestRenderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestRenderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frame", wireType)
			}
			m.Frame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlWorkerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlWorkerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlWorkerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkerStop{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ControlWorkerRequest_Stop{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerStop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerStop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerStop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlWorkerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlWorkerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlWorkerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Build = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authenticator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authenticator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenderLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenderLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenderLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frame", wireType)
			}
			m.Frame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slice", wireType)
			}
			m.Slice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenderLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenderLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenderLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frame", wireType)
			}
			m.Frame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slice", wireType)
			}
			m.Slice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenderLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenderLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenderLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RenderLog == nil {
				m.RenderLog = &RenderLog{}
			}
			if err := m.RenderLog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JobLog == nil {
				m.JobLog = &JobLog{}
			}
			if err := m.JobLog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJobArchiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJobArchiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJobArchiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobArchive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobArchive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobArchive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArchiveUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArchiveUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJobArchiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJobArchiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJobArchiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobArchive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JobArchive == nil {
				m.JobArchive = &JobArchive{}
			}
			if err := m.JobArchive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRender(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRender
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRender
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRender
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRender
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRender
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRender
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRender        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRender          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRender = fmt.Errorf("proto: unexpected end of group")
)
