// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/ehazlett/flow/api/services/workflows/v1/workflows.proto

package workflows

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WorkflowStatus int32

const (
	WorkflowStatus_PENDING  WorkflowStatus = 0
	WorkflowStatus_ASSIGNED WorkflowStatus = 1
	WorkflowStatus_WAITING  WorkflowStatus = 2
	WorkflowStatus_RUNNING  WorkflowStatus = 3
	WorkflowStatus_ERROR    WorkflowStatus = 4
	WorkflowStatus_COMPLETE WorkflowStatus = 5
)

var WorkflowStatus_name = map[int32]string{
	0: "PENDING",
	1: "ASSIGNED",
	2: "WAITING",
	3: "RUNNING",
	4: "ERROR",
	5: "COMPLETE",
}

var WorkflowStatus_value = map[string]int32{
	"PENDING":  0,
	"ASSIGNED": 1,
	"WAITING":  2,
	"RUNNING":  3,
	"ERROR":    4,
	"COMPLETE": 5,
}

func (x WorkflowStatus) String() string {
	return proto.EnumName(WorkflowStatus_name, int32(x))
}

func (WorkflowStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{0}
}

type WorkflowPriority int32

const (
	WorkflowPriority_NORMAL  WorkflowPriority = 0
	WorkflowPriority_LOW     WorkflowPriority = 1
	WorkflowPriority_URGENT  WorkflowPriority = 2
	WorkflowPriority_UNKNOWN WorkflowPriority = 10
)

var WorkflowPriority_name = map[int32]string{
	0:  "NORMAL",
	1:  "LOW",
	2:  "URGENT",
	10: "UNKNOWN",
}

var WorkflowPriority_value = map[string]int32{
	"NORMAL":  0,
	"LOW":     1,
	"URGENT":  2,
	"UNKNOWN": 10,
}

func (x WorkflowPriority) String() string {
	return proto.EnumName(WorkflowPriority_name, int32(x))
}

func (WorkflowPriority) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{1}
}

type ListWorkflowsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListWorkflowsRequest) Reset()         { *m = ListWorkflowsRequest{} }
func (m *ListWorkflowsRequest) String() string { return proto.CompactTextString(m) }
func (*ListWorkflowsRequest) ProtoMessage()    {}
func (*ListWorkflowsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{0}
}
func (m *ListWorkflowsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWorkflowsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWorkflowsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWorkflowsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWorkflowsRequest.Merge(m, src)
}
func (m *ListWorkflowsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWorkflowsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWorkflowsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWorkflowsRequest proto.InternalMessageInfo

type WorkflowOutputLink struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Target               string   `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowOutputLink) Reset()         { *m = WorkflowOutputLink{} }
func (m *WorkflowOutputLink) String() string { return proto.CompactTextString(m) }
func (*WorkflowOutputLink) ProtoMessage()    {}
func (*WorkflowOutputLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{1}
}
func (m *WorkflowOutputLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowOutputLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowOutputLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowOutputLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowOutputLink.Merge(m, src)
}
func (m *WorkflowOutputLink) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowOutputLink) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowOutputLink.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowOutputLink proto.InternalMessageInfo

func (m *WorkflowOutputLink) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WorkflowOutputLink) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type WorkflowOutputArtifact struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ContentType          string   `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	StoragePath          string   `protobuf:"bytes,3,opt,name=storage_path,json=storagePath,proto3" json:"storage_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowOutputArtifact) Reset()         { *m = WorkflowOutputArtifact{} }
func (m *WorkflowOutputArtifact) String() string { return proto.CompactTextString(m) }
func (*WorkflowOutputArtifact) ProtoMessage()    {}
func (*WorkflowOutputArtifact) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{2}
}
func (m *WorkflowOutputArtifact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowOutputArtifact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowOutputArtifact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowOutputArtifact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowOutputArtifact.Merge(m, src)
}
func (m *WorkflowOutputArtifact) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowOutputArtifact) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowOutputArtifact.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowOutputArtifact proto.InternalMessageInfo

func (m *WorkflowOutputArtifact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WorkflowOutputArtifact) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *WorkflowOutputArtifact) GetStoragePath() string {
	if m != nil {
		return m.StoragePath
	}
	return ""
}

type WorkflowOutputMetadata struct {
	Thumbnail            string                `protobuf:"bytes,1,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Links                []*WorkflowOutputLink `protobuf:"bytes,2,rep,name=links,proto3" json:"links,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *WorkflowOutputMetadata) Reset()         { *m = WorkflowOutputMetadata{} }
func (m *WorkflowOutputMetadata) String() string { return proto.CompactTextString(m) }
func (*WorkflowOutputMetadata) ProtoMessage()    {}
func (*WorkflowOutputMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{3}
}
func (m *WorkflowOutputMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowOutputMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowOutputMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowOutputMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowOutputMetadata.Merge(m, src)
}
func (m *WorkflowOutputMetadata) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowOutputMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowOutputMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowOutputMetadata proto.InternalMessageInfo

func (m *WorkflowOutputMetadata) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *WorkflowOutputMetadata) GetLinks() []*WorkflowOutputLink {
	if m != nil {
		return m.Links
	}
	return nil
}

type WorkflowOutput struct {
	ID                   string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Namespace            string                    `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Metadata             *WorkflowOutputMetadata   `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Log                  string                    `protobuf:"bytes,4,opt,name=log,proto3" json:"log,omitempty"`
	Info                 map[string]string         `protobuf:"bytes,5,rep,name=info,proto3" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Artifacts            []*WorkflowOutputArtifact `protobuf:"bytes,6,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	StartedAt            time.Time                 `protobuf:"bytes,7,opt,name=started_at,json=startedAt,proto3,stdtime" json:"started_at"`
	FinishedAt           time.Time                 `protobuf:"bytes,8,opt,name=finished_at,json=finishedAt,proto3,stdtime" json:"finished_at"`
	Duration             time.Duration             `protobuf:"bytes,9,opt,name=duration,proto3,stdduration" json:"duration"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *WorkflowOutput) Reset()         { *m = WorkflowOutput{} }
func (m *WorkflowOutput) String() string { return proto.CompactTextString(m) }
func (*WorkflowOutput) ProtoMessage()    {}
func (*WorkflowOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{4}
}
func (m *WorkflowOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowOutput.Merge(m, src)
}
func (m *WorkflowOutput) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowOutput.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowOutput proto.InternalMessageInfo

func (m *WorkflowOutput) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *WorkflowOutput) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *WorkflowOutput) GetMetadata() *WorkflowOutputMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *WorkflowOutput) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

func (m *WorkflowOutput) GetInfo() map[string]string {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *WorkflowOutput) GetArtifacts() []*WorkflowOutputArtifact {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

func (m *WorkflowOutput) GetStartedAt() time.Time {
	if m != nil {
		return m.StartedAt
	}
	return time.Time{}
}

func (m *WorkflowOutput) GetFinishedAt() time.Time {
	if m != nil {
		return m.FinishedAt
	}
	return time.Time{}
}

func (m *WorkflowOutput) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

type Workflow struct {
	ID         string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type       string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Name       string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Namespace  string            `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Parameters map[string]string `protobuf:"bytes,5,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status     WorkflowStatus    `protobuf:"varint,7,opt,name=status,proto3,enum=flow.services.workflows.v1.WorkflowStatus" json:"status,omitempty"`
	Output     *WorkflowOutput   `protobuf:"bytes,8,opt,name=output,proto3" json:"output,omitempty"`
	CreatedAt  time.Time         `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt  time.Time         `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
	Priority   WorkflowPriority  `protobuf:"varint,11,opt,name=priority,proto3,enum=flow.services.workflows.v1.WorkflowPriority" json:"priority,omitempty"`
	Labels     map[string]string `protobuf:"bytes,12,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are valid to be assigned to Input:
	//	*Workflow_Workflows
	//	*Workflow_File
	Input                isWorkflow_Input `protobuf_oneof:"input"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Workflow) Reset()         { *m = Workflow{} }
func (m *Workflow) String() string { return proto.CompactTextString(m) }
func (*Workflow) ProtoMessage()    {}
func (*Workflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{5}
}
func (m *Workflow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Workflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Workflow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Workflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workflow.Merge(m, src)
}
func (m *Workflow) XXX_Size() int {
	return m.Size()
}
func (m *Workflow) XXX_DiscardUnknown() {
	xxx_messageInfo_Workflow.DiscardUnknown(m)
}

var xxx_messageInfo_Workflow proto.InternalMessageInfo

type isWorkflow_Input interface {
	isWorkflow_Input()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Workflow_Workflows struct {
	Workflows *WorkflowInputWorkflows `protobuf:"bytes,13,opt,name=workflows,proto3,oneof" json:"workflows,omitempty"`
}
type Workflow_File struct {
	File *WorkflowInputFile `protobuf:"bytes,14,opt,name=file,proto3,oneof" json:"file,omitempty"`
}

func (*Workflow_Workflows) isWorkflow_Input() {}
func (*Workflow_File) isWorkflow_Input()      {}

func (m *Workflow) GetInput() isWorkflow_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Workflow) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Workflow) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Workflow) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Workflow) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Workflow) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Workflow) GetStatus() WorkflowStatus {
	if m != nil {
		return m.Status
	}
	return WorkflowStatus_PENDING
}

func (m *Workflow) GetOutput() *WorkflowOutput {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *Workflow) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Workflow) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *Workflow) GetPriority() WorkflowPriority {
	if m != nil {
		return m.Priority
	}
	return WorkflowPriority_NORMAL
}

func (m *Workflow) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Workflow) GetWorkflows() *WorkflowInputWorkflows {
	if x, ok := m.GetInput().(*Workflow_Workflows); ok {
		return x.Workflows
	}
	return nil
}

func (m *Workflow) GetFile() *WorkflowInputFile {
	if x, ok := m.GetInput().(*Workflow_File); ok {
		return x.File
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Workflow) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Workflow_Workflows)(nil),
		(*Workflow_File)(nil),
	}
}

type ListWorkflowsResponse struct {
	Workflows            []*Workflow `protobuf:"bytes,1,rep,name=workflows,proto3" json:"workflows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListWorkflowsResponse) Reset()         { *m = ListWorkflowsResponse{} }
func (m *ListWorkflowsResponse) String() string { return proto.CompactTextString(m) }
func (*ListWorkflowsResponse) ProtoMessage()    {}
func (*ListWorkflowsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{6}
}
func (m *ListWorkflowsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWorkflowsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWorkflowsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWorkflowsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWorkflowsResponse.Merge(m, src)
}
func (m *ListWorkflowsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWorkflowsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWorkflowsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWorkflowsResponse proto.InternalMessageInfo

func (m *ListWorkflowsResponse) GetWorkflows() []*Workflow {
	if m != nil {
		return m.Workflows
	}
	return nil
}

type GetWorkflowRequest struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWorkflowRequest) Reset()         { *m = GetWorkflowRequest{} }
func (m *GetWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*GetWorkflowRequest) ProtoMessage()    {}
func (*GetWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{7}
}
func (m *GetWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWorkflowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkflowRequest.Merge(m, src)
}
func (m *GetWorkflowRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkflowRequest proto.InternalMessageInfo

func (m *GetWorkflowRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type GetWorkflowResponse struct {
	Workflow             *Workflow `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetWorkflowResponse) Reset()         { *m = GetWorkflowResponse{} }
func (m *GetWorkflowResponse) String() string { return proto.CompactTextString(m) }
func (*GetWorkflowResponse) ProtoMessage()    {}
func (*GetWorkflowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{8}
}
func (m *GetWorkflowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWorkflowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWorkflowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWorkflowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkflowResponse.Merge(m, src)
}
func (m *GetWorkflowResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWorkflowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkflowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkflowResponse proto.InternalMessageInfo

func (m *GetWorkflowResponse) GetWorkflow() *Workflow {
	if m != nil {
		return m.Workflow
	}
	return nil
}

type WorkflowInputFile struct {
	Filename             string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	ContentType          string   `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	StoragePath          string   `protobuf:"bytes,3,opt,name=storage_path,json=storagePath,proto3" json:"storage_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowInputFile) Reset()         { *m = WorkflowInputFile{} }
func (m *WorkflowInputFile) String() string { return proto.CompactTextString(m) }
func (*WorkflowInputFile) ProtoMessage()    {}
func (*WorkflowInputFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{9}
}
func (m *WorkflowInputFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowInputFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowInputFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowInputFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowInputFile.Merge(m, src)
}
func (m *WorkflowInputFile) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowInputFile) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowInputFile.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowInputFile proto.InternalMessageInfo

func (m *WorkflowInputFile) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *WorkflowInputFile) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *WorkflowInputFile) GetStoragePath() string {
	if m != nil {
		return m.StoragePath
	}
	return ""
}

type WorkflowInputWorkflow struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowInputWorkflow) Reset()         { *m = WorkflowInputWorkflow{} }
func (m *WorkflowInputWorkflow) String() string { return proto.CompactTextString(m) }
func (*WorkflowInputWorkflow) ProtoMessage()    {}
func (*WorkflowInputWorkflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{10}
}
func (m *WorkflowInputWorkflow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowInputWorkflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowInputWorkflow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowInputWorkflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowInputWorkflow.Merge(m, src)
}
func (m *WorkflowInputWorkflow) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowInputWorkflow) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowInputWorkflow.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowInputWorkflow proto.InternalMessageInfo

func (m *WorkflowInputWorkflow) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *WorkflowInputWorkflow) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type WorkflowInputWorkflows struct {
	WorkflowInputs       []*WorkflowInputWorkflow `protobuf:"bytes,1,rep,name=workflow_inputs,json=workflowInputs,proto3" json:"workflow_inputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *WorkflowInputWorkflows) Reset()         { *m = WorkflowInputWorkflows{} }
func (m *WorkflowInputWorkflows) String() string { return proto.CompactTextString(m) }
func (*WorkflowInputWorkflows) ProtoMessage()    {}
func (*WorkflowInputWorkflows) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{11}
}
func (m *WorkflowInputWorkflows) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowInputWorkflows) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowInputWorkflows.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowInputWorkflows) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowInputWorkflows.Merge(m, src)
}
func (m *WorkflowInputWorkflows) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowInputWorkflows) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowInputWorkflows.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowInputWorkflows proto.InternalMessageInfo

func (m *WorkflowInputWorkflows) GetWorkflowInputs() []*WorkflowInputWorkflow {
	if m != nil {
		return m.WorkflowInputs
	}
	return nil
}

type WorkflowRequest struct {
	Type       string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name       string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Parameters map[string]string `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Priority   WorkflowPriority  `protobuf:"varint,4,opt,name=priority,proto3,enum=flow.services.workflows.v1.WorkflowPriority" json:"priority,omitempty"`
	Labels     map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are valid to be assigned to Input:
	//	*WorkflowRequest_Workflows
	//	*WorkflowRequest_File
	Input                isWorkflowRequest_Input `protobuf_oneof:"input"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *WorkflowRequest) Reset()         { *m = WorkflowRequest{} }
func (m *WorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*WorkflowRequest) ProtoMessage()    {}
func (*WorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{12}
}
func (m *WorkflowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowRequest.Merge(m, src)
}
func (m *WorkflowRequest) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowRequest proto.InternalMessageInfo

type isWorkflowRequest_Input interface {
	isWorkflowRequest_Input()
	MarshalTo([]byte) (int, error)
	Size() int
}

type WorkflowRequest_Workflows struct {
	Workflows *WorkflowInputWorkflows `protobuf:"bytes,6,opt,name=workflows,proto3,oneof" json:"workflows,omitempty"`
}
type WorkflowRequest_File struct {
	File *WorkflowInputFile `protobuf:"bytes,7,opt,name=file,proto3,oneof" json:"file,omitempty"`
}

func (*WorkflowRequest_Workflows) isWorkflowRequest_Input() {}
func (*WorkflowRequest_File) isWorkflowRequest_Input()      {}

func (m *WorkflowRequest) GetInput() isWorkflowRequest_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *WorkflowRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *WorkflowRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WorkflowRequest) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *WorkflowRequest) GetPriority() WorkflowPriority {
	if m != nil {
		return m.Priority
	}
	return WorkflowPriority_NORMAL
}

func (m *WorkflowRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *WorkflowRequest) GetWorkflows() *WorkflowInputWorkflows {
	if x, ok := m.GetInput().(*WorkflowRequest_Workflows); ok {
		return x.Workflows
	}
	return nil
}

func (m *WorkflowRequest) GetFile() *WorkflowInputFile {
	if x, ok := m.GetInput().(*WorkflowRequest_File); ok {
		return x.File
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WorkflowRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WorkflowRequest_Workflows)(nil),
		(*WorkflowRequest_File)(nil),
	}
}

type QueueWorkflowRequest struct {
	// Types that are valid to be assigned to Data:
	//	*QueueWorkflowRequest_Request
	//	*QueueWorkflowRequest_ChunkData
	Data                 isQueueWorkflowRequest_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *QueueWorkflowRequest) Reset()         { *m = QueueWorkflowRequest{} }
func (m *QueueWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*QueueWorkflowRequest) ProtoMessage()    {}
func (*QueueWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{13}
}
func (m *QueueWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueWorkflowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueWorkflowRequest.Merge(m, src)
}
func (m *QueueWorkflowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueueWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueueWorkflowRequest proto.InternalMessageInfo

type isQueueWorkflowRequest_Data interface {
	isQueueWorkflowRequest_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueueWorkflowRequest_Request struct {
	Request *WorkflowRequest `protobuf:"bytes,1,opt,name=request,proto3,oneof" json:"request,omitempty"`
}
type QueueWorkflowRequest_ChunkData struct {
	ChunkData []byte `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3,oneof" json:"chunk_data,omitempty"`
}

func (*QueueWorkflowRequest_Request) isQueueWorkflowRequest_Data()   {}
func (*QueueWorkflowRequest_ChunkData) isQueueWorkflowRequest_Data() {}

func (m *QueueWorkflowRequest) GetData() isQueueWorkflowRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *QueueWorkflowRequest) GetRequest() *WorkflowRequest {
	if x, ok := m.GetData().(*QueueWorkflowRequest_Request); ok {
		return x.Request
	}
	return nil
}

func (m *QueueWorkflowRequest) GetChunkData() []byte {
	if x, ok := m.GetData().(*QueueWorkflowRequest_ChunkData); ok {
		return x.ChunkData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueueWorkflowRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueueWorkflowRequest_Request)(nil),
		(*QueueWorkflowRequest_ChunkData)(nil),
	}
}

type QueueWorkflowResponse struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueueWorkflowResponse) Reset()         { *m = QueueWorkflowResponse{} }
func (m *QueueWorkflowResponse) String() string { return proto.CompactTextString(m) }
func (*QueueWorkflowResponse) ProtoMessage()    {}
func (*QueueWorkflowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{14}
}
func (m *QueueWorkflowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueWorkflowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueWorkflowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueWorkflowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueWorkflowResponse.Merge(m, src)
}
func (m *QueueWorkflowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueueWorkflowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueWorkflowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueueWorkflowResponse proto.InternalMessageInfo

func (m *QueueWorkflowResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type DeleteWorkflowRequest struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteWorkflowRequest) Reset()         { *m = DeleteWorkflowRequest{} }
func (m *DeleteWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteWorkflowRequest) ProtoMessage()    {}
func (*DeleteWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{15}
}
func (m *DeleteWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteWorkflowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteWorkflowRequest.Merge(m, src)
}
func (m *DeleteWorkflowRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteWorkflowRequest proto.InternalMessageInfo

func (m *DeleteWorkflowRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type ProcessorInfo struct {
	ID                   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 string    `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	MaxWorkflows         uint64    `protobuf:"varint,3,opt,name=max_workflows,json=maxWorkflows,proto3" json:"max_workflows,omitempty"`
	StartedAt            time.Time `protobuf:"bytes,4,opt,name=started_at,json=startedAt,proto3,stdtime" json:"started_at"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ProcessorInfo) Reset()         { *m = ProcessorInfo{} }
func (m *ProcessorInfo) String() string { return proto.CompactTextString(m) }
func (*ProcessorInfo) ProtoMessage()    {}
func (*ProcessorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{16}
}
func (m *ProcessorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessorInfo.Merge(m, src)
}
func (m *ProcessorInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProcessorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessorInfo proto.InternalMessageInfo

func (m *ProcessorInfo) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ProcessorInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ProcessorInfo) GetMaxWorkflows() uint64 {
	if m != nil {
		return m.MaxWorkflows
	}
	return 0
}

func (m *ProcessorInfo) GetStartedAt() time.Time {
	if m != nil {
		return m.StartedAt
	}
	return time.Time{}
}

type WorkflowAck struct {
	ID                   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Namespace            string         `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Status               WorkflowStatus `protobuf:"varint,3,opt,name=status,proto3,enum=flow.services.workflows.v1.WorkflowStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *WorkflowAck) Reset()         { *m = WorkflowAck{} }
func (m *WorkflowAck) String() string { return proto.CompactTextString(m) }
func (*WorkflowAck) ProtoMessage()    {}
func (*WorkflowAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{17}
}
func (m *WorkflowAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowAck.Merge(m, src)
}
func (m *WorkflowAck) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowAck) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowAck.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowAck proto.InternalMessageInfo

func (m *WorkflowAck) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *WorkflowAck) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *WorkflowAck) GetStatus() WorkflowStatus {
	if m != nil {
		return m.Status
	}
	return WorkflowStatus_PENDING
}

type SubscribeWorkflowEventsRequest struct {
	// Types that are valid to be assigned to Request:
	//	*SubscribeWorkflowEventsRequest_Info
	//	*SubscribeWorkflowEventsRequest_Output
	//	*SubscribeWorkflowEventsRequest_Ack
	Request              isSubscribeWorkflowEventsRequest_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *SubscribeWorkflowEventsRequest) Reset()         { *m = SubscribeWorkflowEventsRequest{} }
func (m *SubscribeWorkflowEventsRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeWorkflowEventsRequest) ProtoMessage()    {}
func (*SubscribeWorkflowEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{18}
}
func (m *SubscribeWorkflowEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeWorkflowEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeWorkflowEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeWorkflowEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeWorkflowEventsRequest.Merge(m, src)
}
func (m *SubscribeWorkflowEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeWorkflowEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeWorkflowEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeWorkflowEventsRequest proto.InternalMessageInfo

type isSubscribeWorkflowEventsRequest_Request interface {
	isSubscribeWorkflowEventsRequest_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SubscribeWorkflowEventsRequest_Info struct {
	Info *ProcessorInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof" json:"info,omitempty"`
}
type SubscribeWorkflowEventsRequest_Output struct {
	Output *WorkflowOutput `protobuf:"bytes,2,opt,name=output,proto3,oneof" json:"output,omitempty"`
}
type SubscribeWorkflowEventsRequest_Ack struct {
	Ack *WorkflowAck `protobuf:"bytes,3,opt,name=ack,proto3,oneof" json:"ack,omitempty"`
}

func (*SubscribeWorkflowEventsRequest_Info) isSubscribeWorkflowEventsRequest_Request()   {}
func (*SubscribeWorkflowEventsRequest_Output) isSubscribeWorkflowEventsRequest_Request() {}
func (*SubscribeWorkflowEventsRequest_Ack) isSubscribeWorkflowEventsRequest_Request()    {}

func (m *SubscribeWorkflowEventsRequest) GetRequest() isSubscribeWorkflowEventsRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SubscribeWorkflowEventsRequest) GetInfo() *ProcessorInfo {
	if x, ok := m.GetRequest().(*SubscribeWorkflowEventsRequest_Info); ok {
		return x.Info
	}
	return nil
}

func (m *SubscribeWorkflowEventsRequest) GetOutput() *WorkflowOutput {
	if x, ok := m.GetRequest().(*SubscribeWorkflowEventsRequest_Output); ok {
		return x.Output
	}
	return nil
}

func (m *SubscribeWorkflowEventsRequest) GetAck() *WorkflowAck {
	if x, ok := m.GetRequest().(*SubscribeWorkflowEventsRequest_Ack); ok {
		return x.Ack
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SubscribeWorkflowEventsRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SubscribeWorkflowEventsRequest_Info)(nil),
		(*SubscribeWorkflowEventsRequest_Output)(nil),
		(*SubscribeWorkflowEventsRequest_Ack)(nil),
	}
}

type WorkflowError struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowError) Reset()         { *m = WorkflowError{} }
func (m *WorkflowError) String() string { return proto.CompactTextString(m) }
func (*WorkflowError) ProtoMessage()    {}
func (*WorkflowError) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{19}
}
func (m *WorkflowError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowError.Merge(m, src)
}
func (m *WorkflowError) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowError) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowError.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowError proto.InternalMessageInfo

func (m *WorkflowError) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type WorkflowCloseEvent struct {
	Error                *WorkflowError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *WorkflowCloseEvent) Reset()         { *m = WorkflowCloseEvent{} }
func (m *WorkflowCloseEvent) String() string { return proto.CompactTextString(m) }
func (*WorkflowCloseEvent) ProtoMessage()    {}
func (*WorkflowCloseEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{20}
}
func (m *WorkflowCloseEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowCloseEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowCloseEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowCloseEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowCloseEvent.Merge(m, src)
}
func (m *WorkflowCloseEvent) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowCloseEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowCloseEvent.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowCloseEvent proto.InternalMessageInfo

func (m *WorkflowCloseEvent) GetError() *WorkflowError {
	if m != nil {
		return m.Error
	}
	return nil
}

type WorkflowEvent struct {
	// Types that are valid to be assigned to Event:
	//	*WorkflowEvent_Workflow
	//	*WorkflowEvent_Close
	Event                isWorkflowEvent_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *WorkflowEvent) Reset()         { *m = WorkflowEvent{} }
func (m *WorkflowEvent) String() string { return proto.CompactTextString(m) }
func (*WorkflowEvent) ProtoMessage()    {}
func (*WorkflowEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{21}
}
func (m *WorkflowEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowEvent.Merge(m, src)
}
func (m *WorkflowEvent) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowEvent.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowEvent proto.InternalMessageInfo

type isWorkflowEvent_Event interface {
	isWorkflowEvent_Event()
	MarshalTo([]byte) (int, error)
	Size() int
}

type WorkflowEvent_Workflow struct {
	Workflow *Workflow `protobuf:"bytes,1,opt,name=workflow,proto3,oneof" json:"workflow,omitempty"`
}
type WorkflowEvent_Close struct {
	Close *WorkflowCloseEvent `protobuf:"bytes,2,opt,name=close,proto3,oneof" json:"close,omitempty"`
}

func (*WorkflowEvent_Workflow) isWorkflowEvent_Event() {}
func (*WorkflowEvent_Close) isWorkflowEvent_Event()    {}

func (m *WorkflowEvent) GetEvent() isWorkflowEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *WorkflowEvent) GetWorkflow() *Workflow {
	if x, ok := m.GetEvent().(*WorkflowEvent_Workflow); ok {
		return x.Workflow
	}
	return nil
}

func (m *WorkflowEvent) GetClose() *WorkflowCloseEvent {
	if x, ok := m.GetEvent().(*WorkflowEvent_Close); ok {
		return x.Close
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WorkflowEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WorkflowEvent_Workflow)(nil),
		(*WorkflowEvent_Close)(nil),
	}
}

type UpdateWorkflowOutputRequest struct {
	WorkflowOutput       *WorkflowOutput `protobuf:"bytes,1,opt,name=workflow_output,json=workflowOutput,proto3" json:"workflow_output,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpdateWorkflowOutputRequest) Reset()         { *m = UpdateWorkflowOutputRequest{} }
func (m *UpdateWorkflowOutputRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateWorkflowOutputRequest) ProtoMessage()    {}
func (*UpdateWorkflowOutputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{22}
}
func (m *UpdateWorkflowOutputRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWorkflowOutputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWorkflowOutputRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWorkflowOutputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWorkflowOutputRequest.Merge(m, src)
}
func (m *UpdateWorkflowOutputRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWorkflowOutputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWorkflowOutputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWorkflowOutputRequest proto.InternalMessageInfo

func (m *UpdateWorkflowOutputRequest) GetWorkflowOutput() *WorkflowOutput {
	if m != nil {
		return m.WorkflowOutput
	}
	return nil
}

type WorkflowOutputArtifactUpload struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Filename             string   `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
	ContentType          string   `protobuf:"bytes,4,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowOutputArtifactUpload) Reset()         { *m = WorkflowOutputArtifactUpload{} }
func (m *WorkflowOutputArtifactUpload) String() string { return proto.CompactTextString(m) }
func (*WorkflowOutputArtifactUpload) ProtoMessage()    {}
func (*WorkflowOutputArtifactUpload) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{23}
}
func (m *WorkflowOutputArtifactUpload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowOutputArtifactUpload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowOutputArtifactUpload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowOutputArtifactUpload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowOutputArtifactUpload.Merge(m, src)
}
func (m *WorkflowOutputArtifactUpload) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowOutputArtifactUpload) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowOutputArtifactUpload.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowOutputArtifactUpload proto.InternalMessageInfo

func (m *WorkflowOutputArtifactUpload) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *WorkflowOutputArtifactUpload) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *WorkflowOutputArtifactUpload) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *WorkflowOutputArtifactUpload) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

type UploadWorkflowArtifactRequest struct {
	// Types that are valid to be assigned to Data:
	//	*UploadWorkflowArtifactRequest_Artifact
	//	*UploadWorkflowArtifactRequest_ChunkData
	Data                 isUploadWorkflowArtifactRequest_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *UploadWorkflowArtifactRequest) Reset()         { *m = UploadWorkflowArtifactRequest{} }
func (m *UploadWorkflowArtifactRequest) String() string { return proto.CompactTextString(m) }
func (*UploadWorkflowArtifactRequest) ProtoMessage()    {}
func (*UploadWorkflowArtifactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{24}
}
func (m *UploadWorkflowArtifactRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadWorkflowArtifactRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadWorkflowArtifactRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadWorkflowArtifactRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadWorkflowArtifactRequest.Merge(m, src)
}
func (m *UploadWorkflowArtifactRequest) XXX_Size() int {
	return m.Size()
}
func (m *UploadWorkflowArtifactRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadWorkflowArtifactRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadWorkflowArtifactRequest proto.InternalMessageInfo

type isUploadWorkflowArtifactRequest_Data interface {
	isUploadWorkflowArtifactRequest_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type UploadWorkflowArtifactRequest_Artifact struct {
	Artifact *WorkflowOutputArtifactUpload `protobuf:"bytes,1,opt,name=artifact,proto3,oneof" json:"artifact,omitempty"`
}
type UploadWorkflowArtifactRequest_ChunkData struct {
	ChunkData []byte `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3,oneof" json:"chunk_data,omitempty"`
}

func (*UploadWorkflowArtifactRequest_Artifact) isUploadWorkflowArtifactRequest_Data()  {}
func (*UploadWorkflowArtifactRequest_ChunkData) isUploadWorkflowArtifactRequest_Data() {}

func (m *UploadWorkflowArtifactRequest) GetData() isUploadWorkflowArtifactRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UploadWorkflowArtifactRequest) GetArtifact() *WorkflowOutputArtifactUpload {
	if x, ok := m.GetData().(*UploadWorkflowArtifactRequest_Artifact); ok {
		return x.Artifact
	}
	return nil
}

func (m *UploadWorkflowArtifactRequest) GetChunkData() []byte {
	if x, ok := m.GetData().(*UploadWorkflowArtifactRequest_ChunkData); ok {
		return x.ChunkData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UploadWorkflowArtifactRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UploadWorkflowArtifactRequest_Artifact)(nil),
		(*UploadWorkflowArtifactRequest_ChunkData)(nil),
	}
}

type UploadWorkflowArtifactResponse struct {
	StoragePath          string   `protobuf:"bytes,1,opt,name=storage_path,json=storagePath,proto3" json:"storage_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadWorkflowArtifactResponse) Reset()         { *m = UploadWorkflowArtifactResponse{} }
func (m *UploadWorkflowArtifactResponse) String() string { return proto.CompactTextString(m) }
func (*UploadWorkflowArtifactResponse) ProtoMessage()    {}
func (*UploadWorkflowArtifactResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{25}
}
func (m *UploadWorkflowArtifactResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadWorkflowArtifactResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadWorkflowArtifactResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadWorkflowArtifactResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadWorkflowArtifactResponse.Merge(m, src)
}
func (m *UploadWorkflowArtifactResponse) XXX_Size() int {
	return m.Size()
}
func (m *UploadWorkflowArtifactResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadWorkflowArtifactResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadWorkflowArtifactResponse proto.InternalMessageInfo

func (m *UploadWorkflowArtifactResponse) GetStoragePath() string {
	if m != nil {
		return m.StoragePath
	}
	return ""
}

type UpdateWorkflowStatusRequest struct {
	ID                   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status               WorkflowStatus `protobuf:"varint,2,opt,name=status,proto3,enum=flow.services.workflows.v1.WorkflowStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UpdateWorkflowStatusRequest) Reset()         { *m = UpdateWorkflowStatusRequest{} }
func (m *UpdateWorkflowStatusRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateWorkflowStatusRequest) ProtoMessage()    {}
func (*UpdateWorkflowStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{26}
}
func (m *UpdateWorkflowStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWorkflowStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWorkflowStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWorkflowStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWorkflowStatusRequest.Merge(m, src)
}
func (m *UpdateWorkflowStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWorkflowStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWorkflowStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWorkflowStatusRequest proto.InternalMessageInfo

func (m *UpdateWorkflowStatusRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *UpdateWorkflowStatusRequest) GetStatus() WorkflowStatus {
	if m != nil {
		return m.Status
	}
	return WorkflowStatus_PENDING
}

type ListWorkflowInputsRequest struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListWorkflowInputsRequest) Reset()         { *m = ListWorkflowInputsRequest{} }
func (m *ListWorkflowInputsRequest) String() string { return proto.CompactTextString(m) }
func (*ListWorkflowInputsRequest) ProtoMessage()    {}
func (*ListWorkflowInputsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{27}
}
func (m *ListWorkflowInputsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWorkflowInputsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWorkflowInputsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWorkflowInputsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWorkflowInputsRequest.Merge(m, src)
}
func (m *ListWorkflowInputsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWorkflowInputsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWorkflowInputsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWorkflowInputsRequest proto.InternalMessageInfo

func (m *ListWorkflowInputsRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ListWorkflowInputsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type ListWorkflowInputsResponse struct {
	Files                []*WorkflowInputFile `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListWorkflowInputsResponse) Reset()         { *m = ListWorkflowInputsResponse{} }
func (m *ListWorkflowInputsResponse) String() string { return proto.CompactTextString(m) }
func (*ListWorkflowInputsResponse) ProtoMessage()    {}
func (*ListWorkflowInputsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{28}
}
func (m *ListWorkflowInputsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWorkflowInputsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWorkflowInputsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWorkflowInputsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWorkflowInputsResponse.Merge(m, src)
}
func (m *ListWorkflowInputsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWorkflowInputsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWorkflowInputsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWorkflowInputsResponse proto.InternalMessageInfo

func (m *ListWorkflowInputsResponse) GetFiles() []*WorkflowInputFile {
	if m != nil {
		return m.Files
	}
	return nil
}

type GetWorkflowInputFileRequest struct {
	StoragePath          string   `protobuf:"bytes,1,opt,name=storage_path,json=storagePath,proto3" json:"storage_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWorkflowInputFileRequest) Reset()         { *m = GetWorkflowInputFileRequest{} }
func (m *GetWorkflowInputFileRequest) String() string { return proto.CompactTextString(m) }
func (*GetWorkflowInputFileRequest) ProtoMessage()    {}
func (*GetWorkflowInputFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{29}
}
func (m *GetWorkflowInputFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWorkflowInputFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWorkflowInputFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWorkflowInputFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkflowInputFileRequest.Merge(m, src)
}
func (m *GetWorkflowInputFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWorkflowInputFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkflowInputFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkflowInputFileRequest proto.InternalMessageInfo

func (m *GetWorkflowInputFileRequest) GetStoragePath() string {
	if m != nil {
		return m.StoragePath
	}
	return ""
}

type WorkflowInputFileContents struct {
	ChunkData            []byte   `protobuf:"bytes,1,opt,name=chunk_data,json=chunkData,proto3" json:"chunk_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowInputFileContents) Reset()         { *m = WorkflowInputFileContents{} }
func (m *WorkflowInputFileContents) String() string { return proto.CompactTextString(m) }
func (*WorkflowInputFileContents) ProtoMessage()    {}
func (*WorkflowInputFileContents) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{30}
}
func (m *WorkflowInputFileContents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowInputFileContents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowInputFileContents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowInputFileContents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowInputFileContents.Merge(m, src)
}
func (m *WorkflowInputFileContents) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowInputFileContents) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowInputFileContents.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowInputFileContents proto.InternalMessageInfo

func (m *WorkflowInputFileContents) GetChunkData() []byte {
	if m != nil {
		return m.ChunkData
	}
	return nil
}

type ListWorkflowProcessorsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListWorkflowProcessorsRequest) Reset()         { *m = ListWorkflowProcessorsRequest{} }
func (m *ListWorkflowProcessorsRequest) String() string { return proto.CompactTextString(m) }
func (*ListWorkflowProcessorsRequest) ProtoMessage()    {}
func (*ListWorkflowProcessorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{31}
}
func (m *ListWorkflowProcessorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWorkflowProcessorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWorkflowProcessorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWorkflowProcessorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWorkflowProcessorsRequest.Merge(m, src)
}
func (m *ListWorkflowProcessorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWorkflowProcessorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWorkflowProcessorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWorkflowProcessorsRequest proto.InternalMessageInfo

type ListWorkflowProcessorsResponse struct {
	Processors           []*ProcessorInfo `protobuf:"bytes,1,rep,name=processors,proto3" json:"processors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListWorkflowProcessorsResponse) Reset()         { *m = ListWorkflowProcessorsResponse{} }
func (m *ListWorkflowProcessorsResponse) String() string { return proto.CompactTextString(m) }
func (*ListWorkflowProcessorsResponse) ProtoMessage()    {}
func (*ListWorkflowProcessorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da78a4468ac36337, []int{32}
}
func (m *ListWorkflowProcessorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWorkflowProcessorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWorkflowProcessorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWorkflowProcessorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWorkflowProcessorsResponse.Merge(m, src)
}
func (m *ListWorkflowProcessorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWorkflowProcessorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWorkflowProcessorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWorkflowProcessorsResponse proto.InternalMessageInfo

func (m *ListWorkflowProcessorsResponse) GetProcessors() []*ProcessorInfo {
	if m != nil {
		return m.Processors
	}
	return nil
}

func init() {
	proto.RegisterEnum("flow.services.workflows.v1.WorkflowStatus", WorkflowStatus_name, WorkflowStatus_value)
	proto.RegisterEnum("flow.services.workflows.v1.WorkflowPriority", WorkflowPriority_name, WorkflowPriority_value)
	proto.RegisterType((*ListWorkflowsRequest)(nil), "flow.services.workflows.v1.ListWorkflowsRequest")
	proto.RegisterType((*WorkflowOutputLink)(nil), "flow.services.workflows.v1.WorkflowOutputLink")
	proto.RegisterType((*WorkflowOutputArtifact)(nil), "flow.services.workflows.v1.WorkflowOutputArtifact")
	proto.RegisterType((*WorkflowOutputMetadata)(nil), "flow.services.workflows.v1.WorkflowOutputMetadata")
	proto.RegisterType((*WorkflowOutput)(nil), "flow.services.workflows.v1.WorkflowOutput")
	proto.RegisterMapType((map[string]string)(nil), "flow.services.workflows.v1.WorkflowOutput.InfoEntry")
	proto.RegisterType((*Workflow)(nil), "flow.services.workflows.v1.Workflow")
	proto.RegisterMapType((map[string]string)(nil), "flow.services.workflows.v1.Workflow.LabelsEntry")
	proto.RegisterMapType((map[string]string)(nil), "flow.services.workflows.v1.Workflow.ParametersEntry")
	proto.RegisterType((*ListWorkflowsResponse)(nil), "flow.services.workflows.v1.ListWorkflowsResponse")
	proto.RegisterType((*GetWorkflowRequest)(nil), "flow.services.workflows.v1.GetWorkflowRequest")
	proto.RegisterType((*GetWorkflowResponse)(nil), "flow.services.workflows.v1.GetWorkflowResponse")
	proto.RegisterType((*WorkflowInputFile)(nil), "flow.services.workflows.v1.WorkflowInputFile")
	proto.RegisterType((*WorkflowInputWorkflow)(nil), "flow.services.workflows.v1.WorkflowInputWorkflow")
	proto.RegisterType((*WorkflowInputWorkflows)(nil), "flow.services.workflows.v1.WorkflowInputWorkflows")
	proto.RegisterType((*WorkflowRequest)(nil), "flow.services.workflows.v1.WorkflowRequest")
	proto.RegisterMapType((map[string]string)(nil), "flow.services.workflows.v1.WorkflowRequest.LabelsEntry")
	proto.RegisterMapType((map[string]string)(nil), "flow.services.workflows.v1.WorkflowRequest.ParametersEntry")
	proto.RegisterType((*QueueWorkflowRequest)(nil), "flow.services.workflows.v1.QueueWorkflowRequest")
	proto.RegisterType((*QueueWorkflowResponse)(nil), "flow.services.workflows.v1.QueueWorkflowResponse")
	proto.RegisterType((*DeleteWorkflowRequest)(nil), "flow.services.workflows.v1.DeleteWorkflowRequest")
	proto.RegisterType((*ProcessorInfo)(nil), "flow.services.workflows.v1.ProcessorInfo")
	proto.RegisterType((*WorkflowAck)(nil), "flow.services.workflows.v1.WorkflowAck")
	proto.RegisterType((*SubscribeWorkflowEventsRequest)(nil), "flow.services.workflows.v1.SubscribeWorkflowEventsRequest")
	proto.RegisterType((*WorkflowError)(nil), "flow.services.workflows.v1.WorkflowError")
	proto.RegisterType((*WorkflowCloseEvent)(nil), "flow.services.workflows.v1.WorkflowCloseEvent")
	proto.RegisterType((*WorkflowEvent)(nil), "flow.services.workflows.v1.WorkflowEvent")
	proto.RegisterType((*UpdateWorkflowOutputRequest)(nil), "flow.services.workflows.v1.UpdateWorkflowOutputRequest")
	proto.RegisterType((*WorkflowOutputArtifactUpload)(nil), "flow.services.workflows.v1.WorkflowOutputArtifactUpload")
	proto.RegisterType((*UploadWorkflowArtifactRequest)(nil), "flow.services.workflows.v1.UploadWorkflowArtifactRequest")
	proto.RegisterType((*UploadWorkflowArtifactResponse)(nil), "flow.services.workflows.v1.UploadWorkflowArtifactResponse")
	proto.RegisterType((*UpdateWorkflowStatusRequest)(nil), "flow.services.workflows.v1.UpdateWorkflowStatusRequest")
	proto.RegisterType((*ListWorkflowInputsRequest)(nil), "flow.services.workflows.v1.ListWorkflowInputsRequest")
	proto.RegisterType((*ListWorkflowInputsResponse)(nil), "flow.services.workflows.v1.ListWorkflowInputsResponse")
	proto.RegisterType((*GetWorkflowInputFileRequest)(nil), "flow.services.workflows.v1.GetWorkflowInputFileRequest")
	proto.RegisterType((*WorkflowInputFileContents)(nil), "flow.services.workflows.v1.WorkflowInputFileContents")
	proto.RegisterType((*ListWorkflowProcessorsRequest)(nil), "flow.services.workflows.v1.ListWorkflowProcessorsRequest")
	proto.RegisterType((*ListWorkflowProcessorsResponse)(nil), "flow.services.workflows.v1.ListWorkflowProcessorsResponse")
}

func init() {
	proto.RegisterFile("github.com/ehazlett/flow/api/services/workflows/v1/workflows.proto", fileDescriptor_da78a4468ac36337)
}

var fileDescriptor_da78a4468ac36337 = []byte{
	// 1776 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0xdd, 0x6f, 0xe3, 0x4a,
	0x15, 0x8f, 0xf3, 0xd5, 0xe4, 0xa4, 0xed, 0x86, 0xa1, 0x2d, 0x59, 0xef, 0xdd, 0xf6, 0x62, 0x40,
	0x94, 0x72, 0x49, 0xb6, 0x85, 0xcb, 0xde, 0xdb, 0x05, 0x6d, 0x93, 0x26, 0xdb, 0x14, 0xda, 0xb4,
	0xeb, 0xb6, 0x14, 0xed, 0x4a, 0x54, 0x6e, 0x3a, 0x4d, 0xad, 0x24, 0xb6, 0xb1, 0xc7, 0xdd, 0x0d,
	0xe2, 0x01, 0x09, 0x24, 0x78, 0x03, 0xc4, 0x0b, 0x8f, 0x3c, 0xc0, 0xff, 0xb2, 0x42, 0x42, 0xe2,
	0x89, 0xc7, 0x05, 0xf5, 0x1f, 0xe0, 0x5f, 0x40, 0x33, 0x1e, 0x7f, 0xe4, 0xcb, 0xb5, 0xc3, 0xbe,
	0xdc, 0x37, 0xcf, 0xc7, 0xf9, 0x9d, 0x33, 0xe7, 0x9c, 0x39, 0xe7, 0x37, 0x09, 0xd4, 0x3a, 0x2a,
	0xb9, 0xb1, 0x2f, 0xcb, 0x6d, 0xbd, 0x5f, 0xc1, 0x37, 0xca, 0x2f, 0x7a, 0x98, 0x90, 0xca, 0x75,
	0x4f, 0x7f, 0x53, 0x51, 0x0c, 0xb5, 0x62, 0x61, 0xf3, 0x56, 0x6d, 0x63, 0xab, 0xf2, 0x46, 0x37,
	0xbb, 0x74, 0xd6, 0xaa, 0xdc, 0x6e, 0xfa, 0x83, 0xb2, 0x61, 0xea, 0x44, 0x47, 0x22, 0x1d, 0x94,
	0xdd, 0xbd, 0x65, 0x7f, 0xf9, 0x76, 0x53, 0x5c, 0xea, 0xe8, 0x1d, 0x9d, 0x6d, 0xab, 0xd0, 0x2f,
	0x47, 0x42, 0x5c, 0xed, 0xe8, 0x7a, 0xa7, 0x87, 0x2b, 0x6c, 0x74, 0x69, 0x5f, 0x57, 0xae, 0x6c,
	0x53, 0x21, 0xaa, 0xae, 0xf1, 0xf5, 0xb5, 0xd1, 0x75, 0xa2, 0xf6, 0xb1, 0x45, 0x94, 0xbe, 0xc1,
	0x37, 0x3c, 0x1a, 0xdd, 0x80, 0xfb, 0x06, 0x19, 0x38, 0x8b, 0xd2, 0x0a, 0x2c, 0x1d, 0xa8, 0x16,
	0x39, 0x77, 0xed, 0x90, 0xf1, 0xcf, 0x6d, 0x6c, 0x11, 0x69, 0x07, 0x90, 0x3b, 0x77, 0x64, 0x13,
	0xc3, 0x26, 0x07, 0xaa, 0xd6, 0x45, 0x08, 0xd2, 0x9a, 0xd2, 0xc7, 0x25, 0xe1, 0x63, 0x61, 0x3d,
	0x2f, 0xb3, 0x6f, 0xb4, 0x02, 0x59, 0xa2, 0x98, 0x1d, 0x4c, 0x4a, 0x49, 0x36, 0xcb, 0x47, 0x92,
	0x09, 0x2b, 0xc3, 0x08, 0x55, 0x93, 0xa8, 0xd7, 0x4a, 0x9b, 0x4c, 0x44, 0xf9, 0x2a, 0xcc, 0xb7,
	0x75, 0x8d, 0x60, 0x8d, 0x5c, 0x90, 0x81, 0x81, 0x39, 0x56, 0x81, 0xcf, 0x9d, 0x0e, 0x0c, 0xb6,
	0xc5, 0x22, 0xba, 0xa9, 0x74, 0xf0, 0x85, 0xa1, 0x90, 0x9b, 0x52, 0xca, 0xd9, 0xc2, 0xe7, 0x8e,
	0x15, 0x72, 0x23, 0xfd, 0x72, 0x54, 0xe7, 0x21, 0x26, 0xca, 0x95, 0x42, 0x14, 0xf4, 0x11, 0xe4,
	0xc9, 0x8d, 0xdd, 0xbf, 0xd4, 0x14, 0xb5, 0xc7, 0x15, 0xfb, 0x13, 0xa8, 0x0e, 0x99, 0x9e, 0xaa,
	0x75, 0xad, 0x52, 0xf2, 0xe3, 0xd4, 0x7a, 0x61, 0xab, 0x5c, 0x9e, 0x1e, 0xa5, 0xf2, 0xb8, 0x5b,
	0x64, 0x47, 0x58, 0xfa, 0x7b, 0x1a, 0x16, 0x87, 0x57, 0xd1, 0x0a, 0x24, 0xd5, 0x2b, 0x47, 0x5f,
	0x2d, 0x7b, 0xf7, 0x7e, 0x2d, 0xb9, 0x5f, 0x97, 0x93, 0xea, 0x15, 0x35, 0x87, 0x1e, 0xdb, 0x32,
	0x94, 0xb6, 0x7b, 0x56, 0x7f, 0x02, 0xb5, 0x20, 0xd7, 0xe7, 0x86, 0xb3, 0x53, 0x16, 0xb6, 0xb6,
	0xa2, 0x5b, 0xe4, 0x1e, 0x59, 0xf6, 0x30, 0x50, 0x11, 0x52, 0x3d, 0xbd, 0x53, 0x4a, 0x33, 0x3d,
	0xf4, 0x13, 0x35, 0x21, 0xad, 0x6a, 0xd7, 0x7a, 0x29, 0xc3, 0xce, 0xfb, 0xbd, 0xe8, 0xe8, 0xe5,
	0x7d, 0xed, 0x5a, 0x6f, 0x68, 0xc4, 0x1c, 0xc8, 0x0c, 0x01, 0x1d, 0x43, 0x5e, 0xe1, 0x81, 0xb5,
	0x4a, 0x59, 0x06, 0x17, 0xc3, 0x58, 0x37, 0x27, 0x64, 0x1f, 0x04, 0xed, 0x02, 0x58, 0x44, 0x31,
	0x09, 0xbe, 0xba, 0x50, 0x48, 0x69, 0x8e, 0x9d, 0x5f, 0x2c, 0x3b, 0x49, 0x5c, 0x76, 0x93, 0xb8,
	0x7c, 0xea, 0x66, 0x79, 0x2d, 0xf7, 0xee, 0xfd, 0x5a, 0xe2, 0x0f, 0xff, 0x5e, 0x13, 0xe4, 0x3c,
	0x97, 0xab, 0x12, 0xd4, 0x80, 0xc2, 0xb5, 0xaa, 0xa9, 0xd6, 0x8d, 0x83, 0x92, 0x8b, 0x81, 0x02,
	0xae, 0x60, 0x95, 0xa0, 0xe7, 0x90, 0x73, 0xaf, 0x5b, 0x29, 0xcf, 0x30, 0x1e, 0x8e, 0x61, 0xd4,
	0xf9, 0x06, 0x07, 0xe2, 0xcf, 0x14, 0xc2, 0x13, 0x12, 0x9f, 0x42, 0xde, 0xf3, 0x18, 0x8d, 0x43,
	0x17, 0x0f, 0x78, 0xfa, 0xd1, 0x4f, 0xb4, 0x04, 0x99, 0x5b, 0xa5, 0x67, 0xbb, 0x39, 0xe0, 0x0c,
	0xb6, 0x93, 0x9f, 0x09, 0xd2, 0xaf, 0xe6, 0x20, 0xe7, 0xfa, 0x6a, 0x6a, 0x1a, 0x21, 0x48, 0x07,
	0x6e, 0x0b, 0xfb, 0xf6, 0x6e, 0x57, 0x2a, 0x70, 0xbb, 0x86, 0xd2, 0x2d, 0x3d, 0x9a, 0x6e, 0xa7,
	0x00, 0x86, 0x62, 0x2a, 0x7d, 0x4c, 0xb0, 0x69, 0xc5, 0x49, 0x89, 0xf2, 0xb1, 0x27, 0xe6, 0xa4,
	0x44, 0x00, 0x07, 0xd5, 0x20, 0x6b, 0x11, 0x85, 0xd8, 0x16, 0x0b, 0xe1, 0xe2, 0xd6, 0x46, 0x14,
	0xc4, 0x13, 0x26, 0x21, 0x73, 0x49, 0x8a, 0xa1, 0xb3, 0x3c, 0xe1, 0x01, 0xdc, 0x88, 0x9e, 0x59,
	0x32, 0x97, 0xa4, 0xe9, 0xd4, 0x36, 0xb1, 0xc2, 0xd3, 0x29, 0x1f, 0x27, 0x9d, 0xb8, 0x5c, 0x95,
	0x81, 0xd8, 0xc6, 0x95, 0x0b, 0x02, 0x71, 0x40, 0xb8, 0x5c, 0x95, 0xa0, 0x26, 0xe4, 0x0c, 0x53,
	0xd5, 0x4d, 0x95, 0x0c, 0x4a, 0x05, 0xe6, 0x93, 0x4f, 0xa2, 0x9c, 0xe7, 0x98, 0xcb, 0xc8, 0x9e,
	0x34, 0x6a, 0x42, 0xb6, 0xa7, 0x5c, 0xe2, 0x9e, 0x55, 0x9a, 0x67, 0xd1, 0x7a, 0x12, 0x29, 0x5a,
	0x07, 0x4c, 0xc4, 0x89, 0x14, 0x97, 0x47, 0x32, 0xe4, 0xbd, 0xcd, 0xa5, 0x85, 0xe8, 0xb5, 0x66,
	0x5f, 0x33, 0x6c, 0xbf, 0x6b, 0x34, 0x13, 0xb2, 0x0f, 0x83, 0x76, 0x21, 0x7d, 0xad, 0xf6, 0x70,
	0x69, 0x91, 0xc1, 0x7d, 0x27, 0x32, 0xdc, 0x0b, 0xb5, 0x87, 0x9b, 0x09, 0x99, 0x09, 0x8b, 0x3f,
	0x84, 0x07, 0x23, 0xd9, 0x15, 0xe7, 0xfa, 0x88, 0x9f, 0x43, 0x21, 0x70, 0xdc, 0x38, 0xa2, 0xb5,
	0x39, 0xc8, 0xa8, 0xd4, 0x1c, 0xe9, 0x35, 0x2c, 0x8f, 0xf4, 0x46, 0xcb, 0xd0, 0x35, 0x0b, 0xa3,
	0x5a, 0xd0, 0x69, 0x02, 0x8b, 0xc0, 0xd7, 0xa3, 0x9c, 0x32, 0xe0, 0x24, 0xe9, 0x13, 0x40, 0x7b,
	0xd8, 0xc3, 0xe6, 0x6d, 0x77, 0xda, 0x45, 0x97, 0xce, 0xe1, 0xcb, 0x43, 0xbb, 0xb9, 0x21, 0x3b,
	0x90, 0x73, 0x11, 0x99, 0x50, 0x54, 0x3b, 0x3c, 0x29, 0xc9, 0x86, 0x2f, 0x8d, 0xc5, 0x00, 0x89,
	0x90, 0xa3, 0x31, 0x08, 0x34, 0x69, 0x6f, 0xfc, 0x81, 0x1a, 0xf5, 0x21, 0x2c, 0x4f, 0xcc, 0xa4,
	0xd9, 0x1a, 0xa6, 0x44, 0xfc, 0xbe, 0x3f, 0x9c, 0x98, 0xe8, 0x15, 0x3c, 0x70, 0xcf, 0x7a, 0xc1,
	0xa2, 0xea, 0x06, 0x6c, 0x33, 0x76, 0x96, 0xcb, 0x8b, 0x6f, 0x82, 0xd3, 0x96, 0xf4, 0x8f, 0x34,
	0x3c, 0x18, 0x0d, 0xa0, 0x5b, 0x91, 0x85, 0x09, 0x15, 0x39, 0x19, 0xa8, 0xc8, 0xaf, 0x87, 0x6a,
	0x6e, 0x8a, 0x99, 0xf4, 0x2c, 0x52, 0xec, 0x1c, 0x45, 0xa1, 0xa5, 0x37, 0x58, 0x68, 0xd2, 0xff,
	0x57, 0xa1, 0x39, 0xf2, 0x0a, 0x8d, 0xd3, 0x16, 0x9e, 0xc6, 0x31, 0xf1, 0xde, 0x7a, 0x93, 0xfd,
	0xb0, 0xf5, 0x66, 0xee, 0x0b, 0x5e, 0x6f, 0x7e, 0x27, 0xc0, 0xd2, 0x4b, 0x1b, 0xdb, 0x78, 0x34,
	0xa9, 0xf6, 0x60, 0xce, 0x74, 0x3e, 0xf9, 0x2d, 0xff, 0x76, 0x8c, 0x30, 0x34, 0x13, 0xb2, 0x2b,
	0x8d, 0xd6, 0x00, 0xda, 0x37, 0xb6, 0xd6, 0xbd, 0x60, 0xd4, 0x92, 0x5a, 0x32, 0x4f, 0x5d, 0xc9,
	0xe6, 0xea, 0x0a, 0x51, 0x6a, 0x59, 0x48, 0xd3, 0x25, 0xa9, 0x02, 0xcb, 0x23, 0x96, 0xf0, 0x8a,
	0x33, 0xad, 0x40, 0x55, 0x60, 0xb9, 0x8e, 0x7b, 0x98, 0xe0, 0xa8, 0x15, 0xed, 0x6f, 0x02, 0x2c,
	0x1c, 0x9b, 0x7a, 0x1b, 0x5b, 0x96, 0x6e, 0x52, 0x8a, 0x14, 0x8b, 0xe4, 0x7c, 0x0d, 0x16, 0xfa,
	0xca, 0xdb, 0x0b, 0x3f, 0x95, 0x68, 0x8d, 0x49, 0xcb, 0xf3, 0x7d, 0xe5, 0xed, 0x79, 0x20, 0x2f,
	0x82, 0x44, 0x32, 0x3d, 0x13, 0x91, 0x94, 0x7e, 0x2b, 0x40, 0xc1, 0x85, 0xac, 0xb6, 0xbb, 0x33,
	0x32, 0x7a, 0x9f, 0x0c, 0xa5, 0x66, 0x25, 0x43, 0xd2, 0x7f, 0x05, 0x58, 0x3d, 0xb1, 0x2f, 0xad,
	0xb6, 0xa9, 0x5e, 0x7a, 0x6e, 0x6e, 0xdc, 0x62, 0x8d, 0xb8, 0xaf, 0x36, 0xf4, 0x9c, 0xd3, 0x7a,
	0x27, 0x4b, 0xbe, 0x15, 0xa6, 0x64, 0xc8, 0xf7, 0xf4, 0x16, 0x30, 0x36, 0x5f, 0xf7, 0x08, 0x57,
	0x32, 0x2e, 0xe1, 0x6a, 0x26, 0x3c, 0xca, 0xf5, 0x0c, 0x52, 0x4a, 0xbb, 0xcb, 0x9f, 0x2e, 0xdf,
	0x8c, 0x02, 0x51, 0x6d, 0x77, 0x9b, 0x09, 0x99, 0x4a, 0xd5, 0xf2, 0x5e, 0xb2, 0x4b, 0xdf, 0x80,
	0x05, 0xef, 0x9c, 0xa6, 0xa9, 0x9b, 0xf4, 0x12, 0x61, 0xfa, 0xc1, 0x2f, 0x96, 0x33, 0x90, 0xce,
	0xfc, 0xb7, 0xea, 0x6e, 0x4f, 0xb7, 0x30, 0xf3, 0x09, 0x7a, 0x1e, 0xdc, 0x7b, 0x8f, 0x33, 0x86,
	0xb4, 0xb8, 0xb0, 0x7f, 0x15, 0x02, 0xea, 0x19, 0x64, 0x6d, 0xb6, 0x76, 0xdb, 0x4c, 0xf8, 0x0d,
	0x17, 0xbd, 0x80, 0x4c, 0x9b, 0x1a, 0xc9, 0x1d, 0x1c, 0xe9, 0xa9, 0xe9, 0x9f, 0xaa, 0x99, 0x90,
	0x1d, 0x71, 0x5a, 0x35, 0x30, 0x9d, 0x91, 0x4c, 0x78, 0x74, 0xc6, 0x28, 0xe6, 0x08, 0xff, 0xe5,
	0x29, 0x71, 0x12, 0x68, 0x80, 0x3c, 0xb4, 0x42, 0x6c, 0x2e, 0xed, 0x75, 0x3e, 0x67, 0x2c, 0xfd,
	0x49, 0x80, 0x8f, 0x26, 0x3f, 0xe4, 0xce, 0x8c, 0x9e, 0xae, 0x5c, 0xcd, 0x78, 0x4b, 0x82, 0xbc,
	0x23, 0x75, 0x0f, 0xef, 0x48, 0x8f, 0xf1, 0x0e, 0xe9, 0x2f, 0x02, 0x3c, 0x76, 0xf4, 0x7b, 0x69,
	0xe5, 0x3e, 0x2f, 0xb9, 0x33, 0x7e, 0x02, 0x39, 0xf7, 0x9d, 0xc9, 0xbd, 0xf0, 0x59, 0xfc, 0xb7,
	0xaa, 0xa3, 0x82, 0x06, 0xd5, 0xc5, 0x8a, 0x5e, 0x57, 0x77, 0x61, 0x75, 0x9a, 0x85, 0xbc, 0xc0,
	0x8e, 0x92, 0x27, 0x61, 0x9c, 0x3c, 0x0d, 0x46, 0x23, 0xce, 0x0b, 0x45, 0x78, 0xc5, 0x0d, 0xd4,
	0xa0, 0xe4, 0xcc, 0x35, 0xe8, 0x25, 0x3c, 0x0c, 0x52, 0x62, 0x87, 0x08, 0xdd, 0xa7, 0x38, 0x9c,
	0xbb, 0x29, 0x20, 0x4e, 0x82, 0xe4, 0xee, 0xd8, 0x85, 0x0c, 0x4d, 0x01, 0x97, 0xb5, 0xc5, 0x6b,
	0xee, 0xb2, 0x23, 0x2b, 0xed, 0xc0, 0xa3, 0x00, 0x7b, 0xf6, 0x97, 0xb9, 0xdd, 0x11, 0x5c, 0xbe,
	0x0d, 0x0f, 0xc7, 0xc4, 0x77, 0x9d, 0xd4, 0xb3, 0xd0, 0xe3, 0xa1, 0xe8, 0x53, 0xe9, 0xf9, 0x40,
	0xec, 0xa5, 0x35, 0x78, 0x1c, 0x3c, 0xa0, 0x57, 0x78, 0xbd, 0xdf, 0xda, 0xba, 0xb0, 0x3a, 0x6d,
	0x03, 0xf7, 0xc2, 0x3e, 0x80, 0xe1, 0xcd, 0x72, 0x57, 0x44, 0xaf, 0xee, 0x72, 0x40, 0x78, 0xe3,
	0x67, 0xfe, 0x6f, 0x54, 0x4e, 0x6c, 0x51, 0x01, 0xe6, 0x8e, 0x1b, 0xad, 0xfa, 0x7e, 0x6b, 0xaf,
	0x98, 0x40, 0xf3, 0x90, 0xab, 0x9e, 0x9c, 0xec, 0xef, 0xb5, 0x1a, 0xf5, 0xa2, 0x40, 0x97, 0xce,
	0xab, 0xfb, 0xa7, 0x74, 0x29, 0x49, 0x07, 0xf2, 0x59, 0xab, 0x45, 0x07, 0x29, 0x94, 0x87, 0x4c,
	0x43, 0x96, 0x8f, 0xe4, 0x62, 0x9a, 0x8a, 0xec, 0x1e, 0x1d, 0x1e, 0x1f, 0x34, 0x4e, 0x1b, 0xc5,
	0xcc, 0xc6, 0x0e, 0x14, 0x47, 0xf9, 0x24, 0x02, 0xc8, 0xb6, 0x8e, 0xe4, 0xc3, 0xea, 0x41, 0x31,
	0x81, 0xe6, 0x20, 0x75, 0x70, 0x74, 0x5e, 0x14, 0xe8, 0xe4, 0x99, 0xbc, 0xd7, 0x68, 0x9d, 0x3a,
	0xd0, 0x67, 0xad, 0x1f, 0xb7, 0x8e, 0xce, 0x5b, 0x45, 0xd8, 0xfa, 0x17, 0x40, 0xde, 0x6f, 0xe2,
	0xb7, 0xb0, 0x30, 0xc4, 0x44, 0x50, 0xe8, 0x5b, 0x77, 0x12, 0x7d, 0x12, 0x37, 0x63, 0x48, 0x38,
	0x0e, 0x5f, 0x17, 0x10, 0x81, 0x85, 0xa1, 0xc7, 0x5f, 0xb8, 0xde, 0x49, 0xbf, 0xa1, 0x86, 0xeb,
	0x9d, 0xfc, 0xb2, 0xd4, 0xa0, 0x10, 0xc8, 0x54, 0x14, 0xda, 0x1d, 0xc6, 0x9f, 0x8f, 0x62, 0x25,
	0xf2, 0x7e, 0xae, 0xef, 0x35, 0x2c, 0x0e, 0xd3, 0x36, 0x14, 0x6a, 0xf4, 0x44, 0x8a, 0x27, 0xae,
	0x8c, 0x71, 0xaa, 0x46, 0xdf, 0x20, 0x03, 0xf4, 0x1b, 0x01, 0xbe, 0x32, 0x85, 0xb0, 0xa0, 0xed,
	0x30, 0x35, 0xe1, 0x2c, 0x47, 0x8c, 0xd6, 0xca, 0xa9, 0xc8, 0xba, 0xf0, 0x44, 0x40, 0xbf, 0x16,
	0x00, 0x8d, 0x57, 0x18, 0xf4, 0x69, 0xd4, 0xe8, 0x0c, 0x15, 0x39, 0xf1, 0xfb, 0x71, 0xc5, 0xb8,
	0xa7, 0x29, 0xb9, 0x9f, 0x54, 0x84, 0xd0, 0xd3, 0x88, 0x31, 0x1b, 0x2d, 0x5b, 0xe2, 0xa7, 0xb1,
	0x6a, 0xa1, 0x5b, 0xad, 0x9e, 0x08, 0xe8, 0x8f, 0x02, 0xac, 0x4c, 0xee, 0x42, 0xe8, 0xf3, 0x30,
	0xcc, 0xd0, 0xde, 0x2a, 0x6e, 0xcf, 0x22, 0xea, 0x5d, 0xb7, 0x0e, 0x2c, 0x4d, 0xea, 0x69, 0xe1,
	0xde, 0x09, 0xe9, 0x82, 0x53, 0x93, 0x72, 0x4c, 0x11, 0xff, 0xa5, 0x3e, 0x86, 0xa2, 0x21, 0x82,
	0x35, 0x55, 0xd1, 0xef, 0x05, 0x58, 0x99, 0x5c, 0xd6, 0xc3, 0xbd, 0x1c, 0xda, 0x2b, 0xc2, 0xbd,
	0x1c, 0xde, 0x45, 0x6a, 0x3f, 0x7a, 0x77, 0xb7, 0x2a, 0xfc, 0xf3, 0x6e, 0x55, 0xf8, 0xcf, 0xdd,
	0xaa, 0xf0, 0xea, 0x07, 0xf1, 0xff, 0xcd, 0x7a, 0xe6, 0x0d, 0x7e, 0x9a, 0xba, 0xcc, 0xb2, 0xf3,
	0x7e, 0xf7, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa6, 0xaf, 0x5f, 0x68, 0x16, 0x1b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkflowsClient is the client API for Workflows service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkflowsClient interface {
	QueueWorkflow(ctx context.Context, opts ...grpc.CallOption) (Workflows_QueueWorkflowClient, error)
	ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*ListWorkflowsResponse, error)
	GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*GetWorkflowResponse, error)
	DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest, opts ...grpc.CallOption) (*types.Empty, error)
	SubscribeWorkflowEvents(ctx context.Context, opts ...grpc.CallOption) (Workflows_SubscribeWorkflowEventsClient, error)
	ListWorkflowInputs(ctx context.Context, in *ListWorkflowInputsRequest, opts ...grpc.CallOption) (*ListWorkflowInputsResponse, error)
	GetWorkflowInputFile(ctx context.Context, in *GetWorkflowInputFileRequest, opts ...grpc.CallOption) (Workflows_GetWorkflowInputFileClient, error)
	UploadWorkflowArtifact(ctx context.Context, opts ...grpc.CallOption) (Workflows_UploadWorkflowArtifactClient, error)
	UpdateWorkflowStatus(ctx context.Context, in *UpdateWorkflowStatusRequest, opts ...grpc.CallOption) (*types.Empty, error)
	UpdateWorkflowOutput(ctx context.Context, in *UpdateWorkflowOutputRequest, opts ...grpc.CallOption) (*types.Empty, error)
	ListWorkflowProcessors(ctx context.Context, in *ListWorkflowProcessorsRequest, opts ...grpc.CallOption) (*ListWorkflowProcessorsResponse, error)
}

type workflowsClient struct {
	cc *grpc.ClientConn
}

func NewWorkflowsClient(cc *grpc.ClientConn) WorkflowsClient {
	return &workflowsClient{cc}
}

func (c *workflowsClient) QueueWorkflow(ctx context.Context, opts ...grpc.CallOption) (Workflows_QueueWorkflowClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Workflows_serviceDesc.Streams[0], "/flow.services.workflows.v1.Workflows/QueueWorkflow", opts...)
	if err != nil {
		return nil, err
	}
	x := &workflowsQueueWorkflowClient{stream}
	return x, nil
}

type Workflows_QueueWorkflowClient interface {
	Send(*QueueWorkflowRequest) error
	CloseAndRecv() (*QueueWorkflowResponse, error)
	grpc.ClientStream
}

type workflowsQueueWorkflowClient struct {
	grpc.ClientStream
}

func (x *workflowsQueueWorkflowClient) Send(m *QueueWorkflowRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workflowsQueueWorkflowClient) CloseAndRecv() (*QueueWorkflowResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(QueueWorkflowResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workflowsClient) ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*ListWorkflowsResponse, error) {
	out := new(ListWorkflowsResponse)
	err := c.cc.Invoke(ctx, "/flow.services.workflows.v1.Workflows/ListWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsClient) GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*GetWorkflowResponse, error) {
	out := new(GetWorkflowResponse)
	err := c.cc.Invoke(ctx, "/flow.services.workflows.v1.Workflows/GetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsClient) DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/flow.services.workflows.v1.Workflows/DeleteWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsClient) SubscribeWorkflowEvents(ctx context.Context, opts ...grpc.CallOption) (Workflows_SubscribeWorkflowEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Workflows_serviceDesc.Streams[1], "/flow.services.workflows.v1.Workflows/SubscribeWorkflowEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &workflowsSubscribeWorkflowEventsClient{stream}
	return x, nil
}

type Workflows_SubscribeWorkflowEventsClient interface {
	Send(*SubscribeWorkflowEventsRequest) error
	Recv() (*WorkflowEvent, error)
	grpc.ClientStream
}

type workflowsSubscribeWorkflowEventsClient struct {
	grpc.ClientStream
}

func (x *workflowsSubscribeWorkflowEventsClient) Send(m *SubscribeWorkflowEventsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workflowsSubscribeWorkflowEventsClient) Recv() (*WorkflowEvent, error) {
	m := new(WorkflowEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workflowsClient) ListWorkflowInputs(ctx context.Context, in *ListWorkflowInputsRequest, opts ...grpc.CallOption) (*ListWorkflowInputsResponse, error) {
	out := new(ListWorkflowInputsResponse)
	err := c.cc.Invoke(ctx, "/flow.services.workflows.v1.Workflows/ListWorkflowInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsClient) GetWorkflowInputFile(ctx context.Context, in *GetWorkflowInputFileRequest, opts ...grpc.CallOption) (Workflows_GetWorkflowInputFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Workflows_serviceDesc.Streams[2], "/flow.services.workflows.v1.Workflows/GetWorkflowInputFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &workflowsGetWorkflowInputFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Workflows_GetWorkflowInputFileClient interface {
	Recv() (*WorkflowInputFileContents, error)
	grpc.ClientStream
}

type workflowsGetWorkflowInputFileClient struct {
	grpc.ClientStream
}

func (x *workflowsGetWorkflowInputFileClient) Recv() (*WorkflowInputFileContents, error) {
	m := new(WorkflowInputFileContents)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workflowsClient) UploadWorkflowArtifact(ctx context.Context, opts ...grpc.CallOption) (Workflows_UploadWorkflowArtifactClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Workflows_serviceDesc.Streams[3], "/flow.services.workflows.v1.Workflows/UploadWorkflowArtifact", opts...)
	if err != nil {
		return nil, err
	}
	x := &workflowsUploadWorkflowArtifactClient{stream}
	return x, nil
}

type Workflows_UploadWorkflowArtifactClient interface {
	Send(*UploadWorkflowArtifactRequest) error
	CloseAndRecv() (*UploadWorkflowArtifactResponse, error)
	grpc.ClientStream
}

type workflowsUploadWorkflowArtifactClient struct {
	grpc.ClientStream
}

func (x *workflowsUploadWorkflowArtifactClient) Send(m *UploadWorkflowArtifactRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workflowsUploadWorkflowArtifactClient) CloseAndRecv() (*UploadWorkflowArtifactResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadWorkflowArtifactResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workflowsClient) UpdateWorkflowStatus(ctx context.Context, in *UpdateWorkflowStatusRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/flow.services.workflows.v1.Workflows/UpdateWorkflowStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsClient) UpdateWorkflowOutput(ctx context.Context, in *UpdateWorkflowOutputRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/flow.services.workflows.v1.Workflows/UpdateWorkflowOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsClient) ListWorkflowProcessors(ctx context.Context, in *ListWorkflowProcessorsRequest, opts ...grpc.CallOption) (*ListWorkflowProcessorsResponse, error) {
	out := new(ListWorkflowProcessorsResponse)
	err := c.cc.Invoke(ctx, "/flow.services.workflows.v1.Workflows/ListWorkflowProcessors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowsServer is the server API for Workflows service.
type WorkflowsServer interface {
	QueueWorkflow(Workflows_QueueWorkflowServer) error
	ListWorkflows(context.Context, *ListWorkflowsRequest) (*ListWorkflowsResponse, error)
	GetWorkflow(context.Context, *GetWorkflowRequest) (*GetWorkflowResponse, error)
	DeleteWorkflow(context.Context, *DeleteWorkflowRequest) (*types.Empty, error)
	SubscribeWorkflowEvents(Workflows_SubscribeWorkflowEventsServer) error
	ListWorkflowInputs(context.Context, *ListWorkflowInputsRequest) (*ListWorkflowInputsResponse, error)
	GetWorkflowInputFile(*GetWorkflowInputFileRequest, Workflows_GetWorkflowInputFileServer) error
	UploadWorkflowArtifact(Workflows_UploadWorkflowArtifactServer) error
	UpdateWorkflowStatus(context.Context, *UpdateWorkflowStatusRequest) (*types.Empty, error)
	UpdateWorkflowOutput(context.Context, *UpdateWorkflowOutputRequest) (*types.Empty, error)
	ListWorkflowProcessors(context.Context, *ListWorkflowProcessorsRequest) (*ListWorkflowProcessorsResponse, error)
}

// UnimplementedWorkflowsServer can be embedded to have forward compatible implementations.
type UnimplementedWorkflowsServer struct {
}

func (*UnimplementedWorkflowsServer) QueueWorkflow(srv Workflows_QueueWorkflowServer) error {
	return status.Errorf(codes.Unimplemented, "method QueueWorkflow not implemented")
}
func (*UnimplementedWorkflowsServer) ListWorkflows(ctx context.Context, req *ListWorkflowsRequest) (*ListWorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (*UnimplementedWorkflowsServer) GetWorkflow(ctx context.Context, req *GetWorkflowRequest) (*GetWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (*UnimplementedWorkflowsServer) DeleteWorkflow(ctx context.Context, req *DeleteWorkflowRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflow not implemented")
}
func (*UnimplementedWorkflowsServer) SubscribeWorkflowEvents(srv Workflows_SubscribeWorkflowEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeWorkflowEvents not implemented")
}
func (*UnimplementedWorkflowsServer) ListWorkflowInputs(ctx context.Context, req *ListWorkflowInputsRequest) (*ListWorkflowInputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflowInputs not implemented")
}
func (*UnimplementedWorkflowsServer) GetWorkflowInputFile(req *GetWorkflowInputFileRequest, srv Workflows_GetWorkflowInputFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetWorkflowInputFile not implemented")
}
func (*UnimplementedWorkflowsServer) UploadWorkflowArtifact(srv Workflows_UploadWorkflowArtifactServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadWorkflowArtifact not implemented")
}
func (*UnimplementedWorkflowsServer) UpdateWorkflowStatus(ctx context.Context, req *UpdateWorkflowStatusRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflowStatus not implemented")
}
func (*UnimplementedWorkflowsServer) UpdateWorkflowOutput(ctx context.Context, req *UpdateWorkflowOutputRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflowOutput not implemented")
}
func (*UnimplementedWorkflowsServer) ListWorkflowProcessors(ctx context.Context, req *ListWorkflowProcessorsRequest) (*ListWorkflowProcessorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflowProcessors not implemented")
}

func RegisterWorkflowsServer(s *grpc.Server, srv WorkflowsServer) {
	s.RegisterService(&_Workflows_serviceDesc, srv)
}

func _Workflows_QueueWorkflow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkflowsServer).QueueWorkflow(&workflowsQueueWorkflowServer{stream})
}

type Workflows_QueueWorkflowServer interface {
	SendAndClose(*QueueWorkflowResponse) error
	Recv() (*QueueWorkflowRequest, error)
	grpc.ServerStream
}

type workflowsQueueWorkflowServer struct {
	grpc.ServerStream
}

func (x *workflowsQueueWorkflowServer) SendAndClose(m *QueueWorkflowResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workflowsQueueWorkflowServer) Recv() (*QueueWorkflowRequest, error) {
	m := new(QueueWorkflowRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Workflows_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowsServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.services.workflows.v1.Workflows/ListWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowsServer).ListWorkflows(ctx, req.(*ListWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflows_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowsServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.services.workflows.v1.Workflows/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowsServer).GetWorkflow(ctx, req.(*GetWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflows_DeleteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowsServer).DeleteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.services.workflows.v1.Workflows/DeleteWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowsServer).DeleteWorkflow(ctx, req.(*DeleteWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflows_SubscribeWorkflowEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkflowsServer).SubscribeWorkflowEvents(&workflowsSubscribeWorkflowEventsServer{stream})
}

type Workflows_SubscribeWorkflowEventsServer interface {
	Send(*WorkflowEvent) error
	Recv() (*SubscribeWorkflowEventsRequest, error)
	grpc.ServerStream
}

type workflowsSubscribeWorkflowEventsServer struct {
	grpc.ServerStream
}

func (x *workflowsSubscribeWorkflowEventsServer) Send(m *WorkflowEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workflowsSubscribeWorkflowEventsServer) Recv() (*SubscribeWorkflowEventsRequest, error) {
	m := new(SubscribeWorkflowEventsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Workflows_ListWorkflowInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowsServer).ListWorkflowInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.services.workflows.v1.Workflows/ListWorkflowInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowsServer).ListWorkflowInputs(ctx, req.(*ListWorkflowInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflows_GetWorkflowInputFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetWorkflowInputFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkflowsServer).GetWorkflowInputFile(m, &workflowsGetWorkflowInputFileServer{stream})
}

type Workflows_GetWorkflowInputFileServer interface {
	Send(*WorkflowInputFileContents) error
	grpc.ServerStream
}

type workflowsGetWorkflowInputFileServer struct {
	grpc.ServerStream
}

func (x *workflowsGetWorkflowInputFileServer) Send(m *WorkflowInputFileContents) error {
	return x.ServerStream.SendMsg(m)
}

func _Workflows_UploadWorkflowArtifact_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkflowsServer).UploadWorkflowArtifact(&workflowsUploadWorkflowArtifactServer{stream})
}

type Workflows_UploadWorkflowArtifactServer interface {
	SendAndClose(*UploadWorkflowArtifactResponse) error
	Recv() (*UploadWorkflowArtifactRequest, error)
	grpc.ServerStream
}

type workflowsUploadWorkflowArtifactServer struct {
	grpc.ServerStream
}

func (x *workflowsUploadWorkflowArtifactServer) SendAndClose(m *UploadWorkflowArtifactResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workflowsUploadWorkflowArtifactServer) Recv() (*UploadWorkflowArtifactRequest, error) {
	m := new(UploadWorkflowArtifactRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Workflows_UpdateWorkflowStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowsServer).UpdateWorkflowStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.services.workflows.v1.Workflows/UpdateWorkflowStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowsServer).UpdateWorkflowStatus(ctx, req.(*UpdateWorkflowStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflows_UpdateWorkflowOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowsServer).UpdateWorkflowOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.services.workflows.v1.Workflows/UpdateWorkflowOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowsServer).UpdateWorkflowOutput(ctx, req.(*UpdateWorkflowOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflows_ListWorkflowProcessors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowProcessorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowsServer).ListWorkflowProcessors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.services.workflows.v1.Workflows/ListWorkflowProcessors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowsServer).ListWorkflowProcessors(ctx, req.(*ListWorkflowProcessorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Workflows_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flow.services.workflows.v1.Workflows",
	HandlerType: (*WorkflowsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWorkflows",
			Handler:    _Workflows_ListWorkflows_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _Workflows_GetWorkflow_Handler,
		},
		{
			MethodName: "DeleteWorkflow",
			Handler:    _Workflows_DeleteWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflowInputs",
			Handler:    _Workflows_ListWorkflowInputs_Handler,
		},
		{
			MethodName: "UpdateWorkflowStatus",
			Handler:    _Workflows_UpdateWorkflowStatus_Handler,
		},
		{
			MethodName: "UpdateWorkflowOutput",
			Handler:    _Workflows_UpdateWorkflowOutput_Handler,
		},
		{
			MethodName: "ListWorkflowProcessors",
			Handler:    _Workflows_ListWorkflowProcessors_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueueWorkflow",
			Handler:       _Workflows_QueueWorkflow_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeWorkflowEvents",
			Handler:       _Workflows_SubscribeWorkflowEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetWorkflowInputFile",
			Handler:       _Workflows_GetWorkflowInputFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadWorkflowArtifact",
			Handler:       _Workflows_UploadWorkflowArtifact_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/ehazlett/flow/api/services/workflows/v1/workflows.proto",
}

func (m *ListWorkflowsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWorkflowsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWorkflowsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowOutputLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowOutputLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowOutputLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowOutputArtifact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowOutputArtifact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowOutputArtifact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StoragePath) > 0 {
		i -= len(m.StoragePath)
		copy(dAtA[i:], m.StoragePath)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.StoragePath)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowOutputMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowOutputMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowOutputMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Links) > 0 {
		for iNdEx := len(m.Links) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Links[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflows(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Thumbnail) > 0 {
		i -= len(m.Thumbnail)
		copy(dAtA[i:], m.Thumbnail)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.Thumbnail)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintWorkflows(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x4a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.FinishedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.FinishedAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintWorkflows(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x42
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintWorkflows(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x3a
	if len(m.Artifacts) > 0 {
		for iNdEx := len(m.Artifacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Artifacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflows(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Info) > 0 {
		for k := range m.Info {
			v := m.Info[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintWorkflows(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWorkflows(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWorkflows(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Log) > 0 {
		i -= len(m.Log)
		copy(dAtA[i:], m.Log)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.Log)))
		i--
		dAtA[i] = 0x22
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflows(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Workflow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Workflow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Workflow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Input != nil {
		{
			size := m.Input.Size()
			i -= size
			if _, err := m.Input.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintWorkflows(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWorkflows(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWorkflows(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x62
		}
	}
	if m.Priority != 0 {
		i = encodeVarintWorkflows(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x58
	}
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintWorkflows(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x52
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintWorkflows(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x4a
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflows(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Status != 0 {
		i = encodeVarintWorkflows(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Parameters) > 0 {
		for k := range m.Parameters {
			v := m.Parameters[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintWorkflows(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWorkflows(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWorkflows(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Workflow_Workflows) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Workflow_Workflows) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Workflows != nil {
		{
			size, err := m.Workflows.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflows(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *Workflow_File) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Workflow_File) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflows(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ListWorkflowsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWorkflowsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWorkflowsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Workflows) > 0 {
		for iNdEx := len(m.Workflows) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Workflows[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflows(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetWorkflowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkflowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWorkflowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWorkflowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkflowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWorkflowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Workflow != nil {
		{
			size, err := m.Workflow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflows(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowInputFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowInputFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowInputFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StoragePath) > 0 {
		i -= len(m.StoragePath)
		copy(dAtA[i:], m.StoragePath)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.StoragePath)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowInputWorkflow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowInputWorkflow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowInputWorkflow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowInputWorkflows) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowInputWorkflows) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowInputWorkflows) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.WorkflowInputs) > 0 {
		for iNdEx := len(m.WorkflowInputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WorkflowInputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflows(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Input != nil {
		{
			size := m.Input.Size()
			i -= size
			if _, err := m.Input.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintWorkflows(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWorkflows(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWorkflows(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Priority != 0 {
		i = encodeVarintWorkflows(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Parameters) > 0 {
		for k := range m.Parameters {
			v := m.Parameters[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintWorkflows(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWorkflows(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWorkflows(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowRequest_Workflows) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowRequest_Workflows) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Workflows != nil {
		{
			size, err := m.Workflows.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflows(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *WorkflowRequest_File) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowRequest_File) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflows(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *QueueWorkflowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueWorkflowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueWorkflowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueueWorkflowRequest_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueWorkflowRequest_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflows(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *QueueWorkflowRequest_ChunkData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueWorkflowRequest_ChunkData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChunkData != nil {
		i -= len(m.ChunkData)
		copy(dAtA[i:], m.ChunkData)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.ChunkData)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *QueueWorkflowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueWorkflowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueWorkflowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteWorkflowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteWorkflowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteWorkflowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n14, err14 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt):])
	if err14 != nil {
		return 0, err14
	}
	i -= n14
	i = encodeVarintWorkflows(dAtA, i, uint64(n14))
	i--
	dAtA[i] = 0x22
	if m.MaxWorkflows != 0 {
		i = encodeVarintWorkflows(dAtA, i, uint64(m.MaxWorkflows))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintWorkflows(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeWorkflowEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeWorkflowEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeWorkflowEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Request != nil {
		{
			size := m.Request.Size()
			i -= size
			if _, err := m.Request.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeWorkflowEventsRequest_Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeWorkflowEventsRequest_Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflows(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *SubscribeWorkflowEventsRequest_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeWorkflowEventsRequest_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflows(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SubscribeWorkflowEventsRequest_Ack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeWorkflowEventsRequest_Ack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ack != nil {
		{
			size, err := m.Ack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflows(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *WorkflowError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowCloseEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowCloseEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowCloseEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflows(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Event != nil {
		{
			size := m.Event.Size()
			i -= size
			if _, err := m.Event.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowEvent_Workflow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowEvent_Workflow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Workflow != nil {
		{
			size, err := m.Workflow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflows(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *WorkflowEvent_Close) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowEvent_Close) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Close != nil {
		{
			size, err := m.Close.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflows(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *UpdateWorkflowOutputRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWorkflowOutputRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWorkflowOutputRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WorkflowOutput != nil {
		{
			size, err := m.WorkflowOutput.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflows(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowOutputArtifactUpload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowOutputArtifactUpload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowOutputArtifactUpload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UploadWorkflowArtifactRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadWorkflowArtifactRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadWorkflowArtifactRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *UploadWorkflowArtifactRequest_Artifact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadWorkflowArtifactRequest_Artifact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Artifact != nil {
		{
			size, err := m.Artifact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflows(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *UploadWorkflowArtifactRequest_ChunkData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadWorkflowArtifactRequest_ChunkData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChunkData != nil {
		i -= len(m.ChunkData)
		copy(dAtA[i:], m.ChunkData)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.ChunkData)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *UploadWorkflowArtifactResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadWorkflowArtifactResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadWorkflowArtifactResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StoragePath) > 0 {
		i -= len(m.StoragePath)
		copy(dAtA[i:], m.StoragePath)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.StoragePath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWorkflowStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWorkflowStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWorkflowStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintWorkflows(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListWorkflowInputsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWorkflowInputsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWorkflowInputsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListWorkflowInputsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWorkflowInputsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWorkflowInputsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflows(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetWorkflowInputFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkflowInputFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWorkflowInputFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StoragePath) > 0 {
		i -= len(m.StoragePath)
		copy(dAtA[i:], m.StoragePath)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.StoragePath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowInputFileContents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowInputFileContents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowInputFileContents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ChunkData) > 0 {
		i -= len(m.ChunkData)
		copy(dAtA[i:], m.ChunkData)
		i = encodeVarintWorkflows(dAtA, i, uint64(len(m.ChunkData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListWorkflowProcessorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWorkflowProcessorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWorkflowProcessorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ListWorkflowProcessorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWorkflowProcessorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWorkflowProcessorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Processors) > 0 {
		for iNdEx := len(m.Processors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Processors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflows(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintWorkflows(dAtA []byte, offset int, v uint64) int {
	offset -= sovWorkflows(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListWorkflowsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowOutputLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowOutputArtifact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	l = len(m.StoragePath)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowOutputMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Thumbnail)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if len(m.Links) > 0 {
		for _, e := range m.Links {
			l = e.Size()
			n += 1 + l + sovWorkflows(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovWorkflows(uint64(l))
	}
	l = len(m.Log)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if len(m.Info) > 0 {
		for k, v := range m.Info {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovWorkflows(uint64(len(k))) + 1 + len(v) + sovWorkflows(uint64(len(v)))
			n += mapEntrySize + 1 + sovWorkflows(uint64(mapEntrySize))
		}
	}
	if len(m.Artifacts) > 0 {
		for _, e := range m.Artifacts {
			l = e.Size()
			n += 1 + l + sovWorkflows(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt)
	n += 1 + l + sovWorkflows(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.FinishedAt)
	n += 1 + l + sovWorkflows(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovWorkflows(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Workflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if len(m.Parameters) > 0 {
		for k, v := range m.Parameters {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovWorkflows(uint64(len(k))) + 1 + len(v) + sovWorkflows(uint64(len(v)))
			n += mapEntrySize + 1 + sovWorkflows(uint64(mapEntrySize))
		}
	}
	if m.Status != 0 {
		n += 1 + sovWorkflows(uint64(m.Status))
	}
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovWorkflows(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovWorkflows(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovWorkflows(uint64(l))
	if m.Priority != 0 {
		n += 1 + sovWorkflows(uint64(m.Priority))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovWorkflows(uint64(len(k))) + 1 + len(v) + sovWorkflows(uint64(len(v)))
			n += mapEntrySize + 1 + sovWorkflows(uint64(mapEntrySize))
		}
	}
	if m.Input != nil {
		n += m.Input.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Workflow_Workflows) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Workflows != nil {
		l = m.Workflows.Size()
		n += 1 + l + sovWorkflows(uint64(l))
	}
	return n
}
func (m *Workflow_File) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovWorkflows(uint64(l))
	}
	return n
}
func (m *ListWorkflowsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Workflows) > 0 {
		for _, e := range m.Workflows {
			l = e.Size()
			n += 1 + l + sovWorkflows(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetWorkflowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetWorkflowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Workflow != nil {
		l = m.Workflow.Size()
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowInputFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	l = len(m.StoragePath)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowInputWorkflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowInputWorkflows) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WorkflowInputs) > 0 {
		for _, e := range m.WorkflowInputs {
			l = e.Size()
			n += 1 + l + sovWorkflows(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if len(m.Parameters) > 0 {
		for k, v := range m.Parameters {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovWorkflows(uint64(len(k))) + 1 + len(v) + sovWorkflows(uint64(len(v)))
			n += mapEntrySize + 1 + sovWorkflows(uint64(mapEntrySize))
		}
	}
	if m.Priority != 0 {
		n += 1 + sovWorkflows(uint64(m.Priority))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovWorkflows(uint64(len(k))) + 1 + len(v) + sovWorkflows(uint64(len(v)))
			n += mapEntrySize + 1 + sovWorkflows(uint64(mapEntrySize))
		}
	}
	if m.Input != nil {
		n += m.Input.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowRequest_Workflows) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Workflows != nil {
		l = m.Workflows.Size()
		n += 1 + l + sovWorkflows(uint64(l))
	}
	return n
}
func (m *WorkflowRequest_File) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovWorkflows(uint64(l))
	}
	return n
}
func (m *QueueWorkflowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueueWorkflowRequest_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovWorkflows(uint64(l))
	}
	return n
}
func (m *QueueWorkflowRequest_ChunkData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChunkData != nil {
		l = len(m.ChunkData)
		n += 1 + l + sovWorkflows(uint64(l))
	}
	return n
}
func (m *QueueWorkflowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteWorkflowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.MaxWorkflows != 0 {
		n += 1 + sovWorkflows(uint64(m.MaxWorkflows))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt)
	n += 1 + l + sovWorkflows(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovWorkflows(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubscribeWorkflowEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		n += m.Request.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubscribeWorkflowEventsRequest_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovWorkflows(uint64(l))
	}
	return n
}
func (m *SubscribeWorkflowEventsRequest_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovWorkflows(uint64(l))
	}
	return n
}
func (m *SubscribeWorkflowEventsRequest_Ack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ack != nil {
		l = m.Ack.Size()
		n += 1 + l + sovWorkflows(uint64(l))
	}
	return n
}
func (m *WorkflowError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowCloseEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		n += m.Event.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowEvent_Workflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Workflow != nil {
		l = m.Workflow.Size()
		n += 1 + l + sovWorkflows(uint64(l))
	}
	return n
}
func (m *WorkflowEvent_Close) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Close != nil {
		l = m.Close.Size()
		n += 1 + l + sovWorkflows(uint64(l))
	}
	return n
}
func (m *UpdateWorkflowOutputRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowOutput != nil {
		l = m.WorkflowOutput.Size()
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowOutputArtifactUpload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadWorkflowArtifactRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadWorkflowArtifactRequest_Artifact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Artifact != nil {
		l = m.Artifact.Size()
		n += 1 + l + sovWorkflows(uint64(l))
	}
	return n
}
func (m *UploadWorkflowArtifactRequest_ChunkData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChunkData != nil {
		l = len(m.ChunkData)
		n += 1 + l + sovWorkflows(uint64(l))
	}
	return n
}
func (m *UploadWorkflowArtifactResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StoragePath)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateWorkflowStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovWorkflows(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListWorkflowInputsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListWorkflowInputsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovWorkflows(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetWorkflowInputFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StoragePath)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowInputFileContents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChunkData)
	if l > 0 {
		n += 1 + l + sovWorkflows(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListWorkflowProcessorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListWorkflowProcessorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Processors) > 0 {
		for _, e := range m.Processors {
			l = e.Size()
			n += 1 + l + sovWorkflows(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWorkflows(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWorkflows(x uint64) (n int) {
	return sovWorkflows(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListWorkflowsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWorkflowsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWorkflowsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowOutputLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowOutputLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowOutputLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowOutputArtifact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowOutputArtifact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowOutputArtifact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoragePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowOutputMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowOutputMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowOutputMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumbnail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumbnail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Links = append(m.Links, &WorkflowOutputLink{})
			if err := m.Links[len(m.Links)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &WorkflowOutputMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWorkflows
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflows
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWorkflows
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWorkflows
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflows
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthWorkflows
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthWorkflows
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWorkflows(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWorkflows
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Info[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Artifacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Artifacts = append(m.Artifacts, &WorkflowOutputArtifact{})
			if err := m.Artifacts[len(m.Artifacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.FinishedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Workflow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Workflow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Workflow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parameters == nil {
				m.Parameters = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWorkflows
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflows
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWorkflows
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWorkflows
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflows
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthWorkflows
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthWorkflows
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWorkflows(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWorkflows
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Parameters[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= WorkflowStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &WorkflowOutput{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= WorkflowPriority(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWorkflows
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflows
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWorkflows
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWorkflows
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflows
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthWorkflows
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthWorkflows
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWorkflows(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWorkflows
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workflows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowInputWorkflows{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &Workflow_Workflows{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowInputFile{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &Workflow_File{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWorkflowsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWorkflowsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWorkflowsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workflows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workflows = append(m.Workflows, &Workflow{})
			if err := m.Workflows[len(m.Workflows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkflowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkflowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkflowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkflowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkflowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkflowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workflow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Workflow == nil {
				m.Workflow = &Workflow{}
			}
			if err := m.Workflow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowInputFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowInputFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowInputFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoragePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowInputWorkflow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowInputWorkflow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowInputWorkflow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowInputWorkflows) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowInputWorkflows: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowInputWorkflows: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowInputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowInputs = append(m.WorkflowInputs, &WorkflowInputWorkflow{})
			if err := m.WorkflowInputs[len(m.WorkflowInputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parameters == nil {
				m.Parameters = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWorkflows
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflows
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWorkflows
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWorkflows
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflows
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthWorkflows
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthWorkflows
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWorkflows(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWorkflows
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Parameters[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= WorkflowPriority(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWorkflows
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflows
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWorkflows
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWorkflows
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflows
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthWorkflows
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthWorkflows
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWorkflows(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWorkflows
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workflows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowInputWorkflows{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &WorkflowRequest_Workflows{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowInputFile{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &WorkflowRequest_File{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueWorkflowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueWorkflowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueWorkflowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &QueueWorkflowRequest_Request{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Data = &QueueWorkflowRequest_ChunkData{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueWorkflowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueWorkflowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueWorkflowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteWorkflowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteWorkflowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteWorkflowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxWorkflows", wireType)
			}
			m.MaxWorkflows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxWorkflows |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= WorkflowStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeWorkflowEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeWorkflowEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeWorkflowEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProcessorInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &SubscribeWorkflowEventsRequest_Info{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowOutput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &SubscribeWorkflowEventsRequest_Output{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowAck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &SubscribeWorkflowEventsRequest_Ack{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowCloseEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowCloseEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowCloseEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &WorkflowError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workflow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Workflow{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &WorkflowEvent_Workflow{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Close", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowCloseEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &WorkflowEvent_Close{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWorkflowOutputRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWorkflowOutputRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWorkflowOutputRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowOutput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowOutput == nil {
				m.WorkflowOutput = &WorkflowOutput{}
			}
			if err := m.WorkflowOutput.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowOutputArtifactUpload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowOutputArtifactUpload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowOutputArtifactUpload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadWorkflowArtifactRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadWorkflowArtifactRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadWorkflowArtifactRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Artifact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowOutputArtifactUpload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &UploadWorkflowArtifactRequest_Artifact{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Data = &UploadWorkflowArtifactRequest_ChunkData{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadWorkflowArtifactResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadWorkflowArtifactResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadWorkflowArtifactResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoragePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWorkflowStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWorkflowStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWorkflowStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= WorkflowStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWorkflowInputsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWorkflowInputsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWorkflowInputsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWorkflowInputsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWorkflowInputsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWorkflowInputsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &WorkflowInputFile{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkflowInputFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkflowInputFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkflowInputFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoragePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowInputFileContents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowInputFileContents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowInputFileContents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChunkData = append(m.ChunkData[:0], dAtA[iNdEx:postIndex]...)
			if m.ChunkData == nil {
				m.ChunkData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWorkflowProcessorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWorkflowProcessorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWorkflowProcessorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWorkflowProcessorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWorkflowProcessorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWorkflowProcessorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Processors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflows
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflows
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Processors = append(m.Processors, &ProcessorInfo{})
			if err := m.Processors[len(m.Processors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkflows(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkflows
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflows
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWorkflows
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWorkflows
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWorkflows
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWorkflows        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkflows          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWorkflows = fmt.Errorf("proto: unexpected end of group")
)
